{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "60fc0b38",
   "metadata": {},
   "source": [
    "# INTRODUCTION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a322148",
   "metadata": {},
   "source": [
    "DIVVY is a bike-sharing public system based in Chicago and Evanston. Customers can rent bikes from a Divvy station and pay per minute of use until the bike is returned to any of the 625 stations. The main problem the service faces is to determine the optimal supply/demand of bikes per station per hour. For the service to function efficiently, transport trucks need to reallocate the bikes between stations to ensure demand can be covered optimally throughout the city. In other to do this, we need to identify the traffic per station, to ensure enough bikes are available for customers to rent out and spots are free for clients to return the bikes. In this report, we aim to provide the optimal transportation service system and schedule, taking into account the company’s constraints and optimizing the number of transports."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f215d62f",
   "metadata": {},
   "source": [
    "# IMPORT DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0157a223",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gurobipy import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54768a93",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datascience import *\n",
    "import numpy as np\n",
    "import geopy.distance\n",
    "import calendar\n",
    "import math as math\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plots\n",
    "plots.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d887d968",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>trip_id</th> <th>start_time</th> <th>end_time</th> <th>bikeid</th> <th>tripduration</th> <th>from_station_id</th> <th>from_station_name</th> <th>to_station_id</th> <th>to_station_name</th> <th>usertype</th> <th>gender</th> <th>birthyear</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>16734065</td> <td>9/30/2017 23:59:58</td> <td>10/1/2017 00:05:47</td> <td>1411  </td> <td>349         </td> <td>216            </td> <td>California Ave & Division St</td> <td>259          </td> <td>California Ave & Francis Pl    </td> <td>Subscriber</td> <td>Male  </td> <td>1985     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734064</td> <td>9/30/2017 23:59:53</td> <td>10/1/2017 00:05:47</td> <td>3048  </td> <td>354         </td> <td>216            </td> <td>California Ave & Division St</td> <td>259          </td> <td>California Ave & Francis Pl    </td> <td>Subscriber</td> <td>Male  </td> <td>1979     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734063</td> <td>9/30/2017 23:59:06</td> <td>10/1/2017 00:02:52</td> <td>2590  </td> <td>226         </td> <td>141            </td> <td>Clark St & Lincoln Ave      </td> <td>144          </td> <td>Larrabee St & Webster Ave      </td> <td>Subscriber</td> <td>Male  </td> <td>1993     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734062</td> <td>9/30/2017 23:58:56</td> <td>10/1/2017 00:07:37</td> <td>551   </td> <td>521         </td> <td>96             </td> <td>Desplaines St & Randolph St </td> <td>217          </td> <td>Racine Ave (May St) & Fulton St</td> <td>Customer  </td> <td>nan   </td> <td>nan      </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734061</td> <td>9/30/2017 23:58:47</td> <td>10/1/2017 00:07:37</td> <td>1287  </td> <td>530         </td> <td>96             </td> <td>Desplaines St & Randolph St </td> <td>217          </td> <td>Racine Ave (May St) & Fulton St</td> <td>Subscriber</td> <td>Female</td> <td>1994     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734060</td> <td>9/30/2017 23:58:45</td> <td>10/1/2017 00:16:37</td> <td>6132  </td> <td>1072        </td> <td>478            </td> <td>Rockwell St & Eastwood Ave  </td> <td>117          </td> <td>Wilton Ave & Belmont Ave       </td> <td>Subscriber</td> <td>Male  </td> <td>1980     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734059</td> <td>9/30/2017 23:57:19</td> <td>10/1/2017 00:05:36</td> <td>5235  </td> <td>497         </td> <td>114            </td> <td>Sheffield Ave & Waveland Ave</td> <td>296          </td> <td>Broadway & Belmont Ave         </td> <td>Subscriber</td> <td>Male  </td> <td>1988     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734058</td> <td>9/30/2017 23:57:12</td> <td>10/1/2017 00:00:46</td> <td>54    </td> <td>214         </td> <td>87             </td> <td>Racine Ave & Fullerton Ave  </td> <td>127          </td> <td>Lincoln Ave & Fullerton Ave    </td> <td>Subscriber</td> <td>Male  </td> <td>1977     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734057</td> <td>9/30/2017 23:56:59</td> <td>10/1/2017 00:20:17</td> <td>3823  </td> <td>1398        </td> <td>90             </td> <td>Millennium Park             </td> <td>86           </td> <td>Eckhart Park                   </td> <td>Customer  </td> <td>nan   </td> <td>nan      </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16734056</td> <td>9/30/2017 23:56:52</td> <td>10/1/2017 00:14:44</td> <td>5794  </td> <td>1072        </td> <td>296            </td> <td>Broadway & Belmont Ave      </td> <td>268          </td> <td>Lake Shore Dr & North Blvd     </td> <td>Subscriber</td> <td>Female</td> <td>1990     </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (1608260 rows omitted)</p>"
      ],
      "text/plain": [
       "trip_id  | start_time         | end_time           | bikeid | tripduration | from_station_id | from_station_name            | to_station_id | to_station_name                 | usertype   | gender | birthyear\n",
       "16734065 | 9/30/2017 23:59:58 | 10/1/2017 00:05:47 | 1411   | 349          | 216             | California Ave & Division St | 259           | California Ave & Francis Pl     | Subscriber | Male   | 1985\n",
       "16734064 | 9/30/2017 23:59:53 | 10/1/2017 00:05:47 | 3048   | 354          | 216             | California Ave & Division St | 259           | California Ave & Francis Pl     | Subscriber | Male   | 1979\n",
       "16734063 | 9/30/2017 23:59:06 | 10/1/2017 00:02:52 | 2590   | 226          | 141             | Clark St & Lincoln Ave       | 144           | Larrabee St & Webster Ave       | Subscriber | Male   | 1993\n",
       "16734062 | 9/30/2017 23:58:56 | 10/1/2017 00:07:37 | 551    | 521          | 96              | Desplaines St & Randolph St  | 217           | Racine Ave (May St) & Fulton St | Customer   | nan    | nan\n",
       "16734061 | 9/30/2017 23:58:47 | 10/1/2017 00:07:37 | 1287   | 530          | 96              | Desplaines St & Randolph St  | 217           | Racine Ave (May St) & Fulton St | Subscriber | Female | 1994\n",
       "16734060 | 9/30/2017 23:58:45 | 10/1/2017 00:16:37 | 6132   | 1072         | 478             | Rockwell St & Eastwood Ave   | 117           | Wilton Ave & Belmont Ave        | Subscriber | Male   | 1980\n",
       "16734059 | 9/30/2017 23:57:19 | 10/1/2017 00:05:36 | 5235   | 497          | 114             | Sheffield Ave & Waveland Ave | 296           | Broadway & Belmont Ave          | Subscriber | Male   | 1988\n",
       "16734058 | 9/30/2017 23:57:12 | 10/1/2017 00:00:46 | 54     | 214          | 87              | Racine Ave & Fullerton Ave   | 127           | Lincoln Ave & Fullerton Ave     | Subscriber | Male   | 1977\n",
       "16734057 | 9/30/2017 23:56:59 | 10/1/2017 00:20:17 | 3823   | 1398         | 90              | Millennium Park              | 86            | Eckhart Park                    | Customer   | nan    | nan\n",
       "16734056 | 9/30/2017 23:56:52 | 10/1/2017 00:14:44 | 5794   | 1072         | 296             | Broadway & Belmont Ave       | 268           | Lake Shore Dr & North Blvd      | Subscriber | Female | 1990\n",
       "... (1608260 rows omitted)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trips_Q3 = Table.read_table('Divvy_Trips_2017_Q3.csv')\n",
    "trips_Q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a40c5f6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>trip_id</th> <th>start_time</th> <th>end_time</th> <th>bikeid</th> <th>tripduration</th> <th>from_station_id</th> <th>from_station_name</th> <th>to_station_id</th> <th>to_station_name</th> <th>usertype</th> <th>gender</th> <th>birthyear</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>17536701</td> <td>12/31/2017 23:58</td> <td>1/1/2018 0:03   </td> <td>3304  </td> <td>284         </td> <td>159            </td> <td>Claremont Ave & Hirsch St          </td> <td>69           </td> <td>Damen Ave & Pierce Ave             </td> <td>Subscriber</td> <td>Male  </td> <td>1988     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536700</td> <td>12/31/2017 23:54</td> <td>1/1/2018 0:18   </td> <td>5975  </td> <td>1402        </td> <td>145            </td> <td>Mies van der Rohe Way & Chestnut St</td> <td>145          </td> <td>Mies van der Rohe Way & Chestnut St</td> <td>Customer  </td> <td>nan   </td> <td>nan      </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536699</td> <td>12/31/2017 23:54</td> <td>1/1/2018 0:18   </td> <td>4906  </td> <td>1441        </td> <td>145            </td> <td>Mies van der Rohe Way & Chestnut St</td> <td>145          </td> <td>Mies van der Rohe Way & Chestnut St</td> <td>Customer  </td> <td>nan   </td> <td>nan      </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536698</td> <td>12/31/2017 23:48</td> <td>12/31/2017 23:53</td> <td>5667  </td> <td>315         </td> <td>340            </td> <td>Clark St & Wrightwood Ave          </td> <td>143          </td> <td>Sedgwick St & Webster Ave          </td> <td>Subscriber</td> <td>Male  </td> <td>1963     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536697</td> <td>12/31/2017 23:42</td> <td>12/31/2017 23:47</td> <td>5353  </td> <td>272         </td> <td>240            </td> <td>Sheridan Rd & Irving Park Rd       </td> <td>245          </td> <td>Clarendon Ave & Junior Ter         </td> <td>Subscriber</td> <td>Male  </td> <td>1977     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536696</td> <td>12/31/2017 23:41</td> <td>12/31/2017 23:51</td> <td>5840  </td> <td>589         </td> <td>93             </td> <td>Sheffield Ave & Willow St          </td> <td>343          </td> <td>Racine Ave & Wrightwood Ave        </td> <td>Subscriber</td> <td>Male  </td> <td>1988     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536695</td> <td>12/31/2017 23:34</td> <td>12/31/2017 23:39</td> <td>6351  </td> <td>301         </td> <td>337            </td> <td>Clark St & Chicago Ave             </td> <td>182          </td> <td>Wells St & Elm St                  </td> <td>Subscriber</td> <td>Male  </td> <td>1990     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536694</td> <td>12/31/2017 23:21</td> <td>12/31/2017 23:23</td> <td>2562  </td> <td>141         </td> <td>226            </td> <td>Racine Ave & Belmont Ave           </td> <td>117          </td> <td>Wilton Ave & Belmont Ave           </td> <td>Subscriber</td> <td>Male  </td> <td>1987     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536693</td> <td>12/31/2017 23:17</td> <td>12/31/2017 23:27</td> <td>2471  </td> <td>615         </td> <td>49             </td> <td>Dearborn St & Monroe St            </td> <td>26           </td> <td>McClurg Ct & Illinois St           </td> <td>Subscriber</td> <td>Male  </td> <td>1981     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>17536692</td> <td>12/31/2017 22:57</td> <td>12/31/2017 23:09</td> <td>6462  </td> <td>743         </td> <td>196            </td> <td>Cityfront Plaza Dr & Pioneer Ct    </td> <td>255          </td> <td>Indiana Ave & Roosevelt Rd         </td> <td>Subscriber</td> <td>Male  </td> <td>1980     </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (669229 rows omitted)</p>"
      ],
      "text/plain": [
       "trip_id  | start_time       | end_time         | bikeid | tripduration | from_station_id | from_station_name                   | to_station_id | to_station_name                     | usertype   | gender | birthyear\n",
       "17536701 | 12/31/2017 23:58 | 1/1/2018 0:03    | 3304   | 284          | 159             | Claremont Ave & Hirsch St           | 69            | Damen Ave & Pierce Ave              | Subscriber | Male   | 1988\n",
       "17536700 | 12/31/2017 23:54 | 1/1/2018 0:18    | 5975   | 1402         | 145             | Mies van der Rohe Way & Chestnut St | 145           | Mies van der Rohe Way & Chestnut St | Customer   | nan    | nan\n",
       "17536699 | 12/31/2017 23:54 | 1/1/2018 0:18    | 4906   | 1441         | 145             | Mies van der Rohe Way & Chestnut St | 145           | Mies van der Rohe Way & Chestnut St | Customer   | nan    | nan\n",
       "17536698 | 12/31/2017 23:48 | 12/31/2017 23:53 | 5667   | 315          | 340             | Clark St & Wrightwood Ave           | 143           | Sedgwick St & Webster Ave           | Subscriber | Male   | 1963\n",
       "17536697 | 12/31/2017 23:42 | 12/31/2017 23:47 | 5353   | 272          | 240             | Sheridan Rd & Irving Park Rd        | 245           | Clarendon Ave & Junior Ter          | Subscriber | Male   | 1977\n",
       "17536696 | 12/31/2017 23:41 | 12/31/2017 23:51 | 5840   | 589          | 93              | Sheffield Ave & Willow St           | 343           | Racine Ave & Wrightwood Ave         | Subscriber | Male   | 1988\n",
       "17536695 | 12/31/2017 23:34 | 12/31/2017 23:39 | 6351   | 301          | 337             | Clark St & Chicago Ave              | 182           | Wells St & Elm St                   | Subscriber | Male   | 1990\n",
       "17536694 | 12/31/2017 23:21 | 12/31/2017 23:23 | 2562   | 141          | 226             | Racine Ave & Belmont Ave            | 117           | Wilton Ave & Belmont Ave            | Subscriber | Male   | 1987\n",
       "17536693 | 12/31/2017 23:17 | 12/31/2017 23:27 | 2471   | 615          | 49              | Dearborn St & Monroe St             | 26            | McClurg Ct & Illinois St            | Subscriber | Male   | 1981\n",
       "17536692 | 12/31/2017 22:57 | 12/31/2017 23:09 | 6462   | 743          | 196             | Cityfront Plaza Dr & Pioneer Ct     | 255           | Indiana Ave & Roosevelt Rd          | Subscriber | Male   | 1980\n",
       "... (669229 rows omitted)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trips_Q4 = Table.read_table('Divvy_Trips_2017_Q4.csv')\n",
    "trips_Q4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "80ad5282",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>start_time</th> <th>end_time</th> <th>bikeid</th> <th>tripduration</th> <th>from_station_id</th> <th>to_station_id</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:58</td> <td>10/1/2017 00:05:47</td> <td>1411  </td> <td>349         </td> <td>216            </td> <td>259          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:53</td> <td>10/1/2017 00:05:47</td> <td>3048  </td> <td>354         </td> <td>216            </td> <td>259          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:06</td> <td>10/1/2017 00:02:52</td> <td>2590  </td> <td>226         </td> <td>141            </td> <td>144          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:56</td> <td>10/1/2017 00:07:37</td> <td>551   </td> <td>521         </td> <td>96             </td> <td>217          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:47</td> <td>10/1/2017 00:07:37</td> <td>1287  </td> <td>530         </td> <td>96             </td> <td>217          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:45</td> <td>10/1/2017 00:16:37</td> <td>6132  </td> <td>1072        </td> <td>478            </td> <td>117          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:57:19</td> <td>10/1/2017 00:05:36</td> <td>5235  </td> <td>497         </td> <td>114            </td> <td>296          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:57:12</td> <td>10/1/2017 00:00:46</td> <td>54    </td> <td>214         </td> <td>87             </td> <td>127          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:56:59</td> <td>10/1/2017 00:20:17</td> <td>3823  </td> <td>1398        </td> <td>90             </td> <td>86           </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:56:52</td> <td>10/1/2017 00:14:44</td> <td>5794  </td> <td>1072        </td> <td>296            </td> <td>268          </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (2277499 rows omitted)</p>"
      ],
      "text/plain": [
       "start_time         | end_time           | bikeid | tripduration | from_station_id | to_station_id\n",
       "9/30/2017 23:59:58 | 10/1/2017 00:05:47 | 1411   | 349          | 216             | 259\n",
       "9/30/2017 23:59:53 | 10/1/2017 00:05:47 | 3048   | 354          | 216             | 259\n",
       "9/30/2017 23:59:06 | 10/1/2017 00:02:52 | 2590   | 226          | 141             | 144\n",
       "9/30/2017 23:58:56 | 10/1/2017 00:07:37 | 551    | 521          | 96              | 217\n",
       "9/30/2017 23:58:47 | 10/1/2017 00:07:37 | 1287   | 530          | 96              | 217\n",
       "9/30/2017 23:58:45 | 10/1/2017 00:16:37 | 6132   | 1072         | 478             | 117\n",
       "9/30/2017 23:57:19 | 10/1/2017 00:05:36 | 5235   | 497          | 114             | 296\n",
       "9/30/2017 23:57:12 | 10/1/2017 00:00:46 | 54     | 214          | 87              | 127\n",
       "9/30/2017 23:56:59 | 10/1/2017 00:20:17 | 3823   | 1398         | 90              | 86\n",
       "9/30/2017 23:56:52 | 10/1/2017 00:14:44 | 5794   | 1072         | 296             | 268\n",
       "... (2277499 rows omitted)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combining the two datasets trips_Q3 and trips_Q4, selecting only relevant columns\n",
    "trips = Table().with_columns('start_time', np.append(trips_Q3.column('start_time'), trips_Q4.column('start_time')),\n",
    "                            'end_time', np.append(trips_Q3.column('end_time'), trips_Q4.column('end_time')),\n",
    "                             'bikeid', np.append(trips_Q3.column('bikeid'), trips_Q4.column('bikeid')),\n",
    "                             'tripduration', np.append(trips_Q3.column('tripduration'), trips_Q4.column('tripduration')),\n",
    "                            'from_station_id', np.append(trips_Q3.column('from_station_id'), trips_Q4.column('from_station_id')),\n",
    "                            'to_station_id', np.append(trips_Q3.column('to_station_id'), trips_Q4.column('to_station_id')))\n",
    "trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7d9c0085",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>id</th> <th>name</th> <th>city</th> <th>latitude</th> <th>longitude</th> <th>dpcapacity</th> <th>online_date</th> <th>Unnamed: 7</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>2   </td> <td>Buckingham Fountain        </td> <td>Chicago</td> <td>41.8764 </td> <td>-87.6203 </td> <td>27        </td> <td>6/10/2013 10:43</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>3   </td> <td>Shedd Aquarium             </td> <td>Chicago</td> <td>41.8672 </td> <td>-87.6154 </td> <td>55        </td> <td>6/10/2013 10:44</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>4   </td> <td>Burnham Harbor             </td> <td>Chicago</td> <td>41.8563 </td> <td>-87.6133 </td> <td>23        </td> <td>6/10/2013 10:46</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>5   </td> <td>State St & Harrison St     </td> <td>Chicago</td> <td>41.8741 </td> <td>-87.6277 </td> <td>23        </td> <td>6/10/2013 10:46</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>6   </td> <td>Dusable Harbor             </td> <td>Chicago</td> <td>41.885  </td> <td>-87.6128 </td> <td>39        </td> <td>6/10/2013 11:18</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>7   </td> <td>Field Blvd & South Water St</td> <td>Chicago</td> <td>41.8863 </td> <td>-87.6175 </td> <td>19        </td> <td>6/19/2013 10:00</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9   </td> <td>Leavitt St & Archer Ave    </td> <td>Chicago</td> <td>41.8288 </td> <td>-87.6806 </td> <td>19        </td> <td>6/21/2013 9:33 </td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>11  </td> <td>Jeffery Blvd & 71st St     </td> <td>Chicago</td> <td>41.7666 </td> <td>-87.5765 </td> <td>11        </td> <td>6/21/2013 9:39 </td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>12  </td> <td>South Shore Dr & 71st St   </td> <td>Chicago</td> <td>41.7664 </td> <td>-87.5657 </td> <td>15        </td> <td>6/21/2013 10:00</td> <td>nan       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>13  </td> <td>Wilton Ave & Diversey Pkwy </td> <td>Chicago</td> <td>41.9324 </td> <td>-87.6527 </td> <td>27        </td> <td>6/22/2013 18:29</td> <td>nan       </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (575 rows omitted)</p>"
      ],
      "text/plain": [
       "id   | name                        | city    | latitude | longitude | dpcapacity | online_date     | Unnamed: 7\n",
       "2    | Buckingham Fountain         | Chicago | 41.8764  | -87.6203  | 27         | 6/10/2013 10:43 | nan\n",
       "3    | Shedd Aquarium              | Chicago | 41.8672  | -87.6154  | 55         | 6/10/2013 10:44 | nan\n",
       "4    | Burnham Harbor              | Chicago | 41.8563  | -87.6133  | 23         | 6/10/2013 10:46 | nan\n",
       "5    | State St & Harrison St      | Chicago | 41.8741  | -87.6277  | 23         | 6/10/2013 10:46 | nan\n",
       "6    | Dusable Harbor              | Chicago | 41.885   | -87.6128  | 39         | 6/10/2013 11:18 | nan\n",
       "7    | Field Blvd & South Water St | Chicago | 41.8863  | -87.6175  | 19         | 6/19/2013 10:00 | nan\n",
       "9    | Leavitt St & Archer Ave     | Chicago | 41.8288  | -87.6806  | 19         | 6/21/2013 9:33  | nan\n",
       "11   | Jeffery Blvd & 71st St      | Chicago | 41.7666  | -87.5765  | 11         | 6/21/2013 9:39  | nan\n",
       "12   | South Shore Dr & 71st St    | Chicago | 41.7664  | -87.5657  | 15         | 6/21/2013 10:00 | nan\n",
       "13   | Wilton Ave & Diversey Pkwy  | Chicago | 41.9324  | -87.6527  | 27         | 6/22/2013 18:29 | nan\n",
       "... (575 rows omitted)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stations = Table.read_table('Divvy_Stations_2017_Q3Q4.csv')\n",
    "stations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff17ef81",
   "metadata": {},
   "source": [
    "# DATA PROCESSING AND EXPLORATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dbdab0c",
   "metadata": {},
   "source": [
    "## 1) Analyze the busiest origin and destination stations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe5c527d",
   "metadata": {},
   "source": [
    "### Busiest origin stations (from_station_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59042ce7",
   "metadata": {},
   "source": [
    "We decided to graph the top 10 busiest origin stations based on the number of trips that start at each bike station. The results, as shown in the graph, indicate that station 35 receives the most traffic by a significant proportion. This is important because managing bike relocation requires an understanding of which stations have the most bikes removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6a543537",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/minhanhtrinh/opt/anaconda3/lib/python3.9/site-packages/datascience/tables.py:3647: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  axis.set_xticklabels(tick_labels, stretch='ultra-condensed')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>id</th> <th>count</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>35  </td> <td>60885</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>192 </td> <td>32806</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>76  </td> <td>31578</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>177 </td> <td>30603</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>268 </td> <td>30045</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>91  </td> <td>27403</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>77  </td> <td>25410</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>85  </td> <td>24546</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>195 </td> <td>22691</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>287 </td> <td>21773</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "id   | count\n",
       "35   | 60885\n",
       "192  | 32806\n",
       "76   | 31578\n",
       "177  | 30603\n",
       "268  | 30045\n",
       "91   | 27403\n",
       "77   | 25410\n",
       "85   | 24546\n",
       "195  | 22691\n",
       "287  | 21773"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# origin_station_c returns the number of times a bike was taken out from a station\n",
    "origin_station_id, origin_station_c = np.unique(trips.column('from_station_id'), \n",
    "                                                          return_counts=True)\n",
    "busiest_origin_stations = Table().with_columns('id', origin_station_id,\n",
    "                                            'count', origin_station_c)\n",
    "busiest_origin_stations = busiest_origin_stations.sort('count', descending=True)\n",
    "busiest_origin_stations.take(np.arange(10)).bar('id')\n",
    "busiest_origin_stations.take(np.arange(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4f0c98a",
   "metadata": {},
   "source": [
    "### Busiest destination stations (to_station_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00f39863",
   "metadata": {},
   "source": [
    "To illustrate which stations have the most bikes returned, we graphed the top 10 busiest destination stations based on the number of trips that end at each station.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e5142e06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>id</th> <th>count</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>35  </td> <td>66486</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>192 </td> <td>35257</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>268 </td> <td>33357</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>177 </td> <td>32252</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>76  </td> <td>29457</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>77  </td> <td>29329</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>85  </td> <td>26279</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>91  </td> <td>25691</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>90  </td> <td>23860</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>43  </td> <td>22341</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "id   | count\n",
       "35   | 66486\n",
       "192  | 35257\n",
       "268  | 33357\n",
       "177  | 32252\n",
       "76   | 29457\n",
       "77   | 29329\n",
       "85   | 26279\n",
       "91   | 25691\n",
       "90   | 23860\n",
       "43   | 22341"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dest_station_id, dest_station_c = np.unique(trips.column('to_station_id'), \n",
    "                                                          return_counts=True)\n",
    "busiest_dest_stations = Table().with_columns('id', dest_station_id,\n",
    "                                            'count', dest_station_c)\n",
    "busiest_dest_stations = busiest_dest_stations.sort('count', descending=True)\n",
    "busiest_origin_stations.take(np.arange(10)).bar('id')\n",
    "busiest_dest_stations.take(np.arange(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c2c1f5e",
   "metadata": {},
   "source": [
    "#### Insight:\n",
    "The 10 busiest origin stations are 35, 192, 76, 177, 268, 91, 77, 85, 195, 287\\\n",
    "The 10 busiest destionation stations are 35, 192, 268, 177, 76, 77, 85, 91, 90, 43"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce8624e4",
   "metadata": {},
   "source": [
    "## 2) Analyze the busiest days of the week"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba0c6860",
   "metadata": {},
   "source": [
    "We decided to graph the percentage of traffic by day to better understand customer behavior and how the day of the week could affect bike placement schedules.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "726a9837",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>start_time</th> <th>end_time</th> <th>bikeid</th> <th>tripduration</th> <th>from_station_id</th> <th>to_station_id</th> <th>date</th> <th>day</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:58</td> <td>10/1/2017 00:05:47</td> <td>1411  </td> <td>349         </td> <td>216            </td> <td>259          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:53</td> <td>10/1/2017 00:05:47</td> <td>3048  </td> <td>354         </td> <td>216            </td> <td>259          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:06</td> <td>10/1/2017 00:02:52</td> <td>2590  </td> <td>226         </td> <td>141            </td> <td>144          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:56</td> <td>10/1/2017 00:07:37</td> <td>551   </td> <td>521         </td> <td>96             </td> <td>217          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:47</td> <td>10/1/2017 00:07:37</td> <td>1287  </td> <td>530         </td> <td>96             </td> <td>217          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:45</td> <td>10/1/2017 00:16:37</td> <td>6132  </td> <td>1072        </td> <td>478            </td> <td>117          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:57:19</td> <td>10/1/2017 00:05:36</td> <td>5235  </td> <td>497         </td> <td>114            </td> <td>296          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:57:12</td> <td>10/1/2017 00:00:46</td> <td>54    </td> <td>214         </td> <td>87             </td> <td>127          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:56:59</td> <td>10/1/2017 00:20:17</td> <td>3823  </td> <td>1398        </td> <td>90             </td> <td>86           </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:56:52</td> <td>10/1/2017 00:14:44</td> <td>5794  </td> <td>1072        </td> <td>296            </td> <td>268          </td> <td>9/30/2017</td> <td>Saturday</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (2277499 rows omitted)</p>"
      ],
      "text/plain": [
       "start_time         | end_time           | bikeid | tripduration | from_station_id | to_station_id | date      | day\n",
       "9/30/2017 23:59:58 | 10/1/2017 00:05:47 | 1411   | 349          | 216             | 259           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:59:53 | 10/1/2017 00:05:47 | 3048   | 354          | 216             | 259           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:59:06 | 10/1/2017 00:02:52 | 2590   | 226          | 141             | 144           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:58:56 | 10/1/2017 00:07:37 | 551    | 521          | 96              | 217           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:58:47 | 10/1/2017 00:07:37 | 1287   | 530          | 96              | 217           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:58:45 | 10/1/2017 00:16:37 | 6132   | 1072         | 478             | 117           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:57:19 | 10/1/2017 00:05:36 | 5235   | 497          | 114             | 296           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:57:12 | 10/1/2017 00:00:46 | 54     | 214          | 87              | 127           | 9/30/2017 | Saturday\n",
       "9/30/2017 23:56:59 | 10/1/2017 00:20:17 | 3823   | 1398         | 90              | 86            | 9/30/2017 | Saturday\n",
       "9/30/2017 23:56:52 | 10/1/2017 00:14:44 | 5794   | 1072         | 296             | 268           | 9/30/2017 | Saturday\n",
       "... (2277499 rows omitted)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date_array = [\"\" for i in range(trips.num_rows)]\n",
    "# extracting the date portion from start_time variable\n",
    "for i in np.arange(trips.num_rows):\n",
    "    date_array[i] = trips.column('start_time')[i].split(' ')[0]\n",
    "trips = trips.with_column('date', date_array)\n",
    "trips\n",
    "# the function findWeekday takes input a date and convert it into a weekday\n",
    "def findWeekday(x):\n",
    "    date = x.split(' ')[0]\n",
    "    m,d,y = (int(i) for i in date.split('/'))   \n",
    "    dayNumber = calendar.weekday(y,m,d)\n",
    "    days =[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n",
    "                         \"Friday\", \"Saturday\", \"Sunday\"]\n",
    "    return (days[dayNumber])\n",
    "trips = trips.with_column('day', trips.apply(findWeekday, 'start_time'))\n",
    "trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "70039aa7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x7f9263b37790>,\n",
       "  <matplotlib.patches.Wedge at 0x7f9263b37eb0>,\n",
       "  <matplotlib.patches.Wedge at 0x7f9263b47610>,\n",
       "  <matplotlib.patches.Wedge at 0x7f9263b47d30>,\n",
       "  <matplotlib.patches.Wedge at 0x7f9265e26490>,\n",
       "  <matplotlib.patches.Wedge at 0x7f9265e26bb0>,\n",
       "  <matplotlib.patches.Wedge at 0x7f9265e33310>],\n",
       " [Text(0.9894414528990799, 0.4806304310850054, 'Friday'),\n",
       "  Text(0.2045556294337497, 1.0808131172718818, 'Monday'),\n",
       "  Text(-0.7353947947586602, 0.8180430892329991, 'Saturday'),\n",
       "  Text(-1.0999885273618832, -0.005023910054478631, 'Sunday'),\n",
       "  Text(-0.7187168405866521, -0.8327341130619913, 'Thursday'),\n",
       "  Text(0.22904363457634655, -1.0758898705072268, 'Tuesday'),\n",
       "  Text(0.9928145270536883, -0.4736236004161546, 'Wednesday')],\n",
       " [Text(0.5396953379449526, 0.26216205331909387, '14.4%'),\n",
       "  Text(0.11157579787295437, 0.5895344276028446, '15.3%'),\n",
       "  Text(-0.4011244335047237, 0.4462053213998176, '14.0%'),\n",
       "  Text(-0.5999937421973908, -0.002740314575170162, '12.8%'),\n",
       "  Text(-0.3920273675927193, -0.45421860712472245, '14.4%'),\n",
       "  Text(0.12493289158709811, -0.5868490202766691, '15.0%'),\n",
       "  Text(0.541535196574739, -0.25834014568153885, '14.2%')])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels= ['Friday', 'Monday', 'Saturday', 'Sunday', 'Thursday', 'Tuesday', 'Wednesday']\n",
    "# counting the number of times a weekday appears in the dataset\n",
    "start_date, counts = np.unique(trips.column('day'), return_counts=True)\n",
    "weekday_table = Table().with_columns('date', start_date, 'count', counts)\n",
    "plots.pie(weekday_table.column('count'), labels = labels, autopct='%1.1f%%')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a82d69b",
   "metadata": {},
   "source": [
    "#### Insight:\n",
    "The traffic seems to spread evenly across all days of the week, although there is a little bit less traffic on the weekend"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ede2623",
   "metadata": {},
   "source": [
    "## 3) Analyze the busiest hours"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7464c01e",
   "metadata": {},
   "source": [
    "The number of journeys each hour is an essential indicator of traffic patterns throughout the day, to investigate this the number of starting and ending trips each hour, the total number of trips were aggregated. The task of relocating bikes to meet demand is highly time dependent, and the graph of these results show clear patterns.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3ffb7d2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>start_time</th> <th>end_time</th> <th>bikeid</th> <th>tripduration</th> <th>from_station_id</th> <th>to_station_id</th> <th>date</th> <th>day</th> <th>start_hour</th> <th>finish_hour</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:58</td> <td>10/1/2017 00:05:47</td> <td>1411  </td> <td>349         </td> <td>216            </td> <td>259          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:53</td> <td>10/1/2017 00:05:47</td> <td>3048  </td> <td>354         </td> <td>216            </td> <td>259          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:59:06</td> <td>10/1/2017 00:02:52</td> <td>2590  </td> <td>226         </td> <td>141            </td> <td>144          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:56</td> <td>10/1/2017 00:07:37</td> <td>551   </td> <td>521         </td> <td>96             </td> <td>217          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:47</td> <td>10/1/2017 00:07:37</td> <td>1287  </td> <td>530         </td> <td>96             </td> <td>217          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:58:45</td> <td>10/1/2017 00:16:37</td> <td>6132  </td> <td>1072        </td> <td>478            </td> <td>117          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:57:19</td> <td>10/1/2017 00:05:36</td> <td>5235  </td> <td>497         </td> <td>114            </td> <td>296          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:57:12</td> <td>10/1/2017 00:00:46</td> <td>54    </td> <td>214         </td> <td>87             </td> <td>127          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:56:59</td> <td>10/1/2017 00:20:17</td> <td>3823  </td> <td>1398        </td> <td>90             </td> <td>86           </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>9/30/2017 23:56:52</td> <td>10/1/2017 00:14:44</td> <td>5794  </td> <td>1072        </td> <td>296            </td> <td>268          </td> <td>9/30/2017</td> <td>Saturday</td> <td>23        </td> <td>0          </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (2277499 rows omitted)</p>"
      ],
      "text/plain": [
       "start_time         | end_time           | bikeid | tripduration | from_station_id | to_station_id | date      | day      | start_hour | finish_hour\n",
       "9/30/2017 23:59:58 | 10/1/2017 00:05:47 | 1411   | 349          | 216             | 259           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:59:53 | 10/1/2017 00:05:47 | 3048   | 354          | 216             | 259           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:59:06 | 10/1/2017 00:02:52 | 2590   | 226          | 141             | 144           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:58:56 | 10/1/2017 00:07:37 | 551    | 521          | 96              | 217           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:58:47 | 10/1/2017 00:07:37 | 1287   | 530          | 96              | 217           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:58:45 | 10/1/2017 00:16:37 | 6132   | 1072         | 478             | 117           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:57:19 | 10/1/2017 00:05:36 | 5235   | 497          | 114             | 296           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:57:12 | 10/1/2017 00:00:46 | 54     | 214          | 87              | 127           | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:56:59 | 10/1/2017 00:20:17 | 3823   | 1398         | 90              | 86            | 9/30/2017 | Saturday | 23         | 0\n",
       "9/30/2017 23:56:52 | 10/1/2017 00:14:44 | 5794   | 1072         | 296             | 268           | 9/30/2017 | Saturday | 23         | 0\n",
       "... (2277499 rows omitted)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_hour_array = [\"\" for i in range(trips.num_rows)]\n",
    "finish_hour_array = [\"\" for i in range(trips.num_rows)]\n",
    "# extracting the date portion from start_time variable\n",
    "for i in np.arange(trips.num_rows):\n",
    "    # hours are formatted differently in each dataset\n",
    "    if (len(trips.column('start_time')[i].split(' ')[1].split(':')[0]) > 1 and \n",
    "        trips.column('start_time')[i].split(' ')[1].split(':')[0][0] == '0'):\n",
    "        start_hour_array[i] = trips.column('start_time')[i].split(' ')[1].split(':')[0][1]\n",
    "    else: \n",
    "        start_hour_array[i] = trips.column('start_time')[i].split(' ')[1].split(':')[0]\n",
    "    if (len(trips.column('end_time')[i].split(' ')[1].split(':')[0]) > 1 and \n",
    "        trips.column('end_time')[i].split(' ')[1].split(':')[0][0] == '0'):\n",
    "        finish_hour_array[i] = trips.column('end_time')[i].split(' ')[1].split(':')[0][1]\n",
    "    else: \n",
    "        finish_hour_array[i] = trips.column('end_time')[i].split(' ')[1].split(':')[0]\n",
    "trips = trips.with_columns('start_hour', start_hour_array, 'finish_hour', finish_hour_array)\n",
    "trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0c2c668e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>start_hour</th> <th>count</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>17        </td> <td>266116</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16        </td> <td>212425</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>18        </td> <td>185283</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>8         </td> <td>169488</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>15        </td> <td>151542</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>13        </td> <td>136228</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>14        </td> <td>136042</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>12        </td> <td>135230</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>7         </td> <td>130595</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>19        </td> <td>123316</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (14 rows omitted)</p>"
      ],
      "text/plain": [
       "start_hour | count\n",
       "17         | 266116\n",
       "16         | 212425\n",
       "18         | 185283\n",
       "8          | 169488\n",
       "15         | 151542\n",
       "13         | 136228\n",
       "14         | 136042\n",
       "12         | 135230\n",
       "7          | 130595\n",
       "19         | 123316\n",
       "... (14 rows omitted)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_hour, start_hour_count = np.unique(trips.column('start_hour'), return_counts=True)\n",
    "start_hour_stats = Table().with_columns('start_hour', start_hour, 'count', start_hour_count).sort('count', descending=True)\n",
    "start_hour_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "80de0927",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "start_hour_stats.bar('start_hour')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "689738de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>finish_hour</th> <th>count</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>17         </td> <td>269170</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>18         </td> <td>203110</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>16         </td> <td>198238</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>8          </td> <td>171195</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>15         </td> <td>148348</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>19         </td> <td>136928</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>13         </td> <td>135219</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>14         </td> <td>134281</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>12         </td> <td>132151</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>7          </td> <td>113516</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<p>... (14 rows omitted)</p>"
      ],
      "text/plain": [
       "finish_hour | count\n",
       "17          | 269170\n",
       "18          | 203110\n",
       "16          | 198238\n",
       "8           | 171195\n",
       "15          | 148348\n",
       "19          | 136928\n",
       "13          | 135219\n",
       "14          | 134281\n",
       "12          | 132151\n",
       "7           | 113516\n",
       "... (14 rows omitted)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finish_hour, finish_hour_count = np.unique(trips.column('finish_hour'), return_counts=True)\n",
    "finish_hour_stats = Table().with_columns('finish_hour', finish_hour, 'count', finish_hour_count).sort('count', descending=True)\n",
    "finish_hour_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c33e6321",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "finish_hour_stats.bar('finish_hour')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "576299cf",
   "metadata": {},
   "source": [
    "#### Insight: \n",
    "The 5 busiest hours are: 17, 16, 18, 8, 15"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54afaef0",
   "metadata": {},
   "source": [
    "## 4) Statistics of trip duration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "849001ac",
   "metadata": {},
   "source": [
    "Investigating the length of customer bike trips is important for predicting necessary bike supply and station capacity. To present our findings, we gathered summary statistics of the data, by collecting the mean, median, maximum and minimum journey times we are able to make important estimations.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "38b29484",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th> </th> <th>statistics</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>mean  </td> <td>966.435   </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>median</td> <td>697       </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>max   </td> <td>86014     </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>min   </td> <td>60        </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "       | statistics\n",
       "mean   | 966.435\n",
       "median | 697\n",
       "max    | 86014\n",
       "min    | 60"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip_duration = trips.column('tripduration')\n",
    "trips_stats = Table().with_columns(' ', ['mean', 'median', 'max', 'min'], \n",
    "                                 'statistics', [np.mean(trip_duration), np.median(trip_duration ), np.max(trip_duration ), np.min(trip_duration )])\n",
    "trips_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c2d6d3d",
   "metadata": {},
   "source": [
    "#### Insight: \n",
    "There is a huge difference between the maximum trip duration and the minimum trip duration, ranging from 1 minute to almost 24 hours. The average trip duration is 16 minutes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d45f7ced",
   "metadata": {},
   "source": [
    "# EXPLANATION OF THE PROBLEM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "877b3308",
   "metadata": {},
   "source": [
    "## What Are We Trying to Solve?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f364b1d3",
   "metadata": {},
   "source": [
    "The model aims to find the optimal schedule and logistic system of repositing of bikes across Chicago and Evanston."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e9d8faa",
   "metadata": {},
   "source": [
    "## What Are We Optimizing?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03558a93",
   "metadata": {},
   "source": [
    "We are optimizing the transport services, and therefore minimizing the operational costs, for DIVVY. The model aims to minimize the number of transports between stations while still meeting customers’ demand. Due to limitations in out computational resources, we have narrowed our recommendation to the optimal schedule for the 5 busiest stations in the city. For the remaining stations we have determined that keeping them at a minimum of 20% of capacity should be enough to fulfill demand. It is important to note this is an assumption we are making to set the constraints of the model in terms of the available resources, not an optimal recommendation for the minimum capacity for stations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5daa3690",
   "metadata": {},
   "source": [
    "## Assumptions and Limitations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73a8ee7f",
   "metadata": {},
   "source": [
    "For the transport costs and services, we are assuming the reposition services work 24h a day – 7 days a week, so the model isn’t limited to hours of service since bikes can be taken out and in at any time. Additionally, we are assuming they can adjust to any recommended schedule. In terms of expenses, we don’t have the fix or variable costs, so we have considered all repositioning actions have an equal cost despite the distance between stations, to focus on minimizing on the total number of transports. \n",
    "Regarding the data available, we have considered the total bikes’ ids in the Divvy_trips_2017 Q3 and Q4 datasets as the total bikes available in the company, to set a constraint for limited resources. Similarly, all stations in the divvy_stations_2017 dataset as the total number of stations the firm manages. Furthermore, since we are using the averages to find the number of bikes taken in and out of the station, we are assuming the historical trips data provided (Divvy_trips_2017_Q3 and Divvy_trips_2017_Q4) is normally distributed, an accurate representation of customer behavior and that there are no seasonality or intra-weekly variances, to establish an optimal schedule that applies everyday of the year."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77e8cb17",
   "metadata": {},
   "source": [
    "# MODEL OVERVIEW"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fef144b",
   "metadata": {},
   "source": [
    "Outline of Parameters, Variables and Constraints"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b4d2e9f",
   "metadata": {},
   "source": [
    "## Parameters\n",
    "For the parameters of the model, we have defined the following four based on the capacity of stations, bikes available and points (stations) of transport:\n",
    "\n",
    "- $C_{i}$ as the capacity of station $i$ \n",
    "- $D_{i,j}$ as the distance from station $i$ to station $j$\n",
    "- $A$ as the total available bikes in Divvy, considering the amount reserved for the stations not considered in the study\n",
    "- $U_{i,j,t}$ as the number of bikes transported from station $i$ to station $j$ by users in time period $t$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "933cd90f",
   "metadata": {},
   "source": [
    "## Variables\n",
    "Regarding the variables, we have defined the following: \n",
    "- $X_{i,j,t}$ as the decision of moving $X_{i,j,t}$ amount of bikes from station $i$ to the station $j$ in time period $t$\n",
    "- $B_{i,t}$ as the amount of bikes at station $i$ in time period $t$\n",
    "where\\\n",
    "$i \\in I,$ $I$ is the set of 5 busiest stations \\\n",
    "$j \\in J,$ $J$ is the set of 5 busiest stations  \\\n",
    "$t \\in T$ = [morning, afternoon]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d4d5ad2",
   "metadata": {},
   "source": [
    "## Constraints\n",
    "We have defined two types of constraints, compulsory and managerial. The first one being all mandatory constrains that account for the limited resources of the company, such as the bikes and stations. The second ones to consider the out-of-the-norm behaviour that can be exhibit by non-regular customers, who have no consistent behaviour that can be mapped out and included in the model. \n",
    "As mentioned before, we have analyzed the top 5 busiest origin and destination stations to provide an optimal capacity on two timeframes: morning and night. To achieve this, we have performed a count of the trips throughout both quarters on all the stations ids, sorted them on descending order and taking the top 5 ids."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc319ad6",
   "metadata": {},
   "source": [
    "### Compulsory constraints"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efb79ef2",
   "metadata": {},
   "source": [
    "1) The number of bikes across all stations at any time must not exceed the available number of bikes Divvy has,  $$\\sum_{i\\in I} B_{i,t} \\le A $$ \n",
    "2) The number of bikes at a station should fit within the available capacity, $$B_{i,t} \\le C_{i} $$ \n",
    "3) The number of bikes to be repositioned from station $i$ to station $j$ in time period $t$ must not be more than the number of bikes station $i$ currently has in time period $t$, $$B_{i,t} = B_{i,t-1} + \\sum_{j\\in J} X_{j,i,t} + \\sum_{j\\in J} U_{j,i,t} - \\sum_{j\\in J} X_{i,j,t} - \\sum_{j\\in J} U_{i,j,t}$$\n",
    "4) $X_{i,j,t}$ and $B_{i,t}$ must be positive integers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1083ce17",
   "metadata": {},
   "source": [
    "### Business constraints\n",
    "1) To account for unpredictable behavior, all stations at any given time should have at least the historical number of bikes picked up from that station in the next time period $t+1$  , $$B_{i,t} \\ge \\sum_{j\\in J} U_{i,j,t+1}$$\n",
    "2) To account for unpredictable behavior, all stations at time $t$ should have at most the difference between that station's capacity and the historical number of bikes dropped off at that station in the next time period $t+1$, $$B_{i,t} \\le C_{i} - \\sum_{j\\in J} U_{j,i,t+1}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "525880bf",
   "metadata": {},
   "source": [
    "### Objective function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de6d086",
   "metadata": {},
   "source": [
    "Our objective function is to minimize the cost of repositioning operation, which is to minimize the total number of trips of repositioning operation from all station $i$ to all station $j$ in all time period $t$. Therefore, we minimize $$\\sum_{i \\in I}\\sum_{j\\in J}\\sum_{t \\in T} X_{i,j,t}.D_{i,j}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3c5036d",
   "metadata": {},
   "source": [
    "# DATA EXTRACTION FOR THE PARAMETERS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22a20fdd",
   "metadata": {},
   "source": [
    "In order to set the parameters, the following data extraction and definition has been performed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88004277",
   "metadata": {},
   "source": [
    "### $C_{i}$ : the capacity of station $i$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "43fda5c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>id</th> <th>dpcapacity</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>35  </td> <td>47        </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>76  </td> <td>39        </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>177 </td> <td>23        </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>192 </td> <td>47        </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>268 </td> <td>39        </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "id   | dpcapacity\n",
       "35   | 47\n",
       "76   | 39\n",
       "177  | 23\n",
       "192  | 47\n",
       "268  | 39"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C = busiest_origin_stations.take(np.arange(5)).join('id', stations, 'id').select('id', 'dpcapacity')\n",
    "C"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8c89357",
   "metadata": {},
   "source": [
    "### $D_{i,j}$: the distance from station $𝑖$ to station $𝑗$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a07e3c95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>id</th> <th>35</th> <th>192</th> <th>76</th> <th>177</th> <th>268</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>35  </td> <td>0      </td> <td>2.72757</td> <td>1.31645</td> <td>4.08549</td> <td>2.48282</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>192 </td> <td>2.72757</td> <td>0      </td> <td>1.93179</td> <td>5.27674</td> <td>3.76645</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>76  </td> <td>1.31645</td> <td>1.93179</td> <td>0      </td> <td>5.16765</td> <td>3.51752</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>177 </td> <td>4.08549</td> <td>5.27674</td> <td>5.16765</td> <td>0      </td> <td>1.65085</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>268 </td> <td>2.48282</td> <td>3.76645</td> <td>3.51752</td> <td>1.65085</td> <td>0      </td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "busiest_stations_coords = busiest_origin_stations.take(np.arange(5)).join('id', stations, 'id').sort('count', descending = True).select('id', 'latitude', 'longitude')\n",
    "D = Table().with_column('id', busiest_origin_stations.take(np.arange(5)).column('id'))\n",
    "def find_distance(station):\n",
    "    global D\n",
    "    lat = busiest_stations_coords.where('id', station).column('latitude')[0]\n",
    "    long = busiest_stations_coords.where('id', station).column('longitude')[0]\n",
    "    this_station_coords = (lat, long)\n",
    "    station_ids = busiest_stations_coords.column('id')\n",
    "    station_distance = np.zeros(len(station_ids))\n",
    "    for i in np.arange(len(station_ids)):\n",
    "        other_station_coords = (busiest_stations_coords.where('id', station_ids[i]).column('latitude')[0],\n",
    "                                busiest_stations_coords.where('id', station_ids[i]).column('longitude')[0])\n",
    "        station_distance[i] = geopy.distance.geodesic(this_station_coords, other_station_coords).km\n",
    "        D = D.with_column(str(station),station_distance)    \n",
    "busiest_stations_coords.apply(find_distance, 'id')\n",
    "D.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5cb7fc00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th> </th> <th>stat</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>mean  </td> <td>3.19233</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>median</td> <td>3.12254</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>max   </td> <td>5.27674</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>min   </td> <td>1.31645</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "       | stat\n",
       "mean   | 3.19233\n",
       "median | 3.12254\n",
       "max    | 5.27674\n",
       "min    | 1.31645"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# statistics of the distance between stations\n",
    "i = 1\n",
    "k = 0\n",
    "j = 1\n",
    "all_dist = np.zeros(sum(np.arange(D.num_rows)))\n",
    "for i in np.arange(i, D.num_rows):\n",
    "    j = i\n",
    "    for j in np.arange(j, D.num_rows):\n",
    "        all_dist[k] = D[i][j] \n",
    "        k = k + 1\n",
    "mean_dist = np.mean(all_dist)\n",
    "all_dist\n",
    "dist_summary = Table().with_columns(' ', ['mean', 'median', 'max', 'min'], \n",
    "                                 'stat', [np.mean(all_dist), np.median(all_dist), np.max(all_dist), np.min(all_dist)])\n",
    "dist_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "578237f1",
   "metadata": {},
   "source": [
    "### $U_{i,j,t}$: the number of bikes transported from station $i$ to all stations $j$ by users in time period $t$ (registered in the from_station_id variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "aca66ee6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>time</th> <th>35</th> <th>192</th> <th>76</th> <th>177</th> <th>268</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>morning</td> <td>59.0339</td> <td>94.5355</td> <td>38.4512</td> <td>35.1796</td> <td>29.1193</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>night  </td> <td>275.607</td> <td>84.2717</td> <td>142.78 </td> <td>138.145</td> <td>140.791</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "time    | 35      | 192     | 76      | 177     | 268\n",
       "morning | 59.0339 | 94.5355 | 38.4512 | 35.1796 | 29.1193\n",
       "night   | 275.607 | 84.2717 | 142.78  | 138.145 | 140.791"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "busiest_origin_stations_traffic = Table().with_columns('id', busiest_origin_stations.take(np.arange(5)).column('id')).join('id', trips.select('from_station_id', 'start_time'), 'from_station_id')\n",
    "date_array = [\"\" for i in range(busiest_origin_stations_traffic.num_rows)]\n",
    "time_array = [\"\" for i in range(busiest_origin_stations_traffic.num_rows)]\n",
    "for i in np.arange(busiest_origin_stations_traffic.num_rows):\n",
    "    date_array[i] = busiest_origin_stations_traffic.column('start_time')[i].split(' ')[0]\n",
    "    if (0 <= int(busiest_origin_stations_traffic.column('start_time')[i].split(' ')[1].split(':')[0]) <= 11):\n",
    "        time_array[i] = 'morning'\n",
    "    else:\n",
    "        time_array[i] = 'night'\n",
    "busiest_origin_stations_traffic = busiest_origin_stations_traffic.with_columns('date', date_array, 'time', time_array).group(['id','date', 'time'])\n",
    "U_ijt = Table().with_column('time', ['morning', 'night'])\n",
    "traffic_count = np.zeros(len(U_ijt.column('time')))\n",
    "def avg_traffic(id):\n",
    "    global U_ijt\n",
    "    for i in np.arange(len(U_ijt.column('time'))):\n",
    "        count = busiest_origin_stations_traffic.where('id', id).where('time', U_ijt[0][i]).column('count')\n",
    "        traffic_count[i] = sum(count)/len(count)\n",
    "    U_ijt = U_ijt.with_column(str(id), [traffic_count[0], traffic_count[1]])\n",
    "for i in np.arange(busiest_origin_stations.take(np.arange(5)).num_rows):\n",
    "    avg_traffic(busiest_origin_stations.take(np.arange(5)).column('id')[i])\n",
    "U_ijt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58d9609f",
   "metadata": {},
   "source": [
    "### $U_{j,i,t}$: the number of bikes transported to station $i$ from all stations $j$ by users in time period $t$ (registered in the to_station_id variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f3703d1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>time</th> <th>35</th> <th>192</th> <th>268</th> <th>177</th> <th>76</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>morning</td> <td>83.5495</td> <td>50.2951</td> <td>38.5439</td> <td>46.3114</td> <td>40.9497</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>night  </td> <td>280.219</td> <td>142.366</td> <td>152.08 </td> <td>137.742</td> <td>130.375</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "time    | 35      | 192     | 268     | 177     | 76\n",
       "morning | 83.5495 | 50.2951 | 38.5439 | 46.3114 | 40.9497\n",
       "night   | 280.219 | 142.366 | 152.08  | 137.742 | 130.375"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "busiest_dest_stations_traffic = Table().with_columns('id', busiest_dest_stations.take(np.arange(5)).column('id')).join('id', trips.select('to_station_id', 'start_time'), 'to_station_id')\n",
    "date_array = [\"\" for i in range(busiest_dest_stations_traffic.num_rows)]\n",
    "time_array = [\"\" for i in range(busiest_dest_stations_traffic.num_rows)]\n",
    "for i in np.arange(busiest_dest_stations_traffic.num_rows):\n",
    "    date_array[i] = busiest_dest_stations_traffic.column('start_time')[i].split(' ')[0]\n",
    "    if (0 <= int(busiest_dest_stations_traffic.column('start_time')[i].split(' ')[1].split(':')[0]) <= 11):\n",
    "        time_array[i] = 'morning'\n",
    "    else:\n",
    "        time_array[i] = 'night'\n",
    "busiest_dest_stations_traffic = busiest_dest_stations_traffic.with_columns('date', date_array, 'time', time_array).group(['id','date', 'time'])\n",
    "busiest_dest_stations_traffic\n",
    "U_jit = Table().with_column('time', ['morning', 'night'])\n",
    "traffic_count = np.zeros(len(U_jit.column('time')))\n",
    "def avg_traffic(id):\n",
    "    global U_jit \n",
    "    for i in np.arange(len(U_jit .column('time'))):\n",
    "        count = busiest_dest_stations_traffic.where('id', id).where('time', U_jit[0][i]).column('count')\n",
    "        traffic_count[i] = sum(count)/len(count)\n",
    "    U_jit = U_jit .with_column(str(id), [traffic_count[0], traffic_count[1]])\n",
    "for i in np.arange(busiest_dest_stations.take(np.arange(5)).num_rows):\n",
    "    avg_traffic(busiest_dest_stations.take(np.arange(5)).column('id')[i])\n",
    "U_jit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c85288c4",
   "metadata": {},
   "source": [
    "### $A$: number of unique bikes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "831c29aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49526.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A is the number of bikes available for each time period (morning & night, 12 hours each)\n",
    "A = len(np.unique(trips.column('bikeid')))*12 \n",
    "\n",
    "# Set the a fixed number of bikes for all the stations that are not included in the model (20%)\n",
    "array = stations.column('dpcapacity')*12*0.2 \n",
    "\n",
    "fixed_num_of_bikes = Table().with_columns('id', stations.column('id'),\n",
    "                                             'fixed number of bikes', [int(x) for x in array])\n",
    "five_busiest_stations = np.zeros(5)\n",
    "\n",
    "# extracting the set number of bikes for 5 busiest stations\n",
    "for i in np.arange(5):\n",
    "    five_busiest_stations[i] = fixed_num_of_bikes.where('id', are.equal_to(busiest_origin_stations.take(np.arange(5)).column('id')[i])).column('fixed number of bikes')[0]\n",
    "\n",
    "# A equals to the total amount of unique bikes minus the total number of bikes set for all stations \n",
    "# plus the fixed amount of bikes set for 5 busiest stations\n",
    "A = A - sum(fixed_num_of_bikes.column('fixed number of bikes')) + sum(five_busiest_stations) \n",
    "A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46d2ba72",
   "metadata": {},
   "source": [
    "# RUNNING GUROBI MODEL OPTIMIZATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a36dfa5",
   "metadata": {},
   "source": [
    "Next, we will set the variables and constraints for the model based on the paramenters mentioned in the section above."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a9970a7",
   "metadata": {},
   "source": [
    "## Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "efe971a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Restricted license - for non-production use only - expires 2023-10-25\n"
     ]
    }
   ],
   "source": [
    "# initialize the model\n",
    "M = Model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "25c51462",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a dictionary of variables\n",
    "S = busiest_origin_stations.take(np.arange(5)).column('id')\n",
    "T = ['morning', 'night']\n",
    "\n",
    "B = {} # optimal number of bikes at a station \n",
    "X = {} # optimal number of bikes to be repositioned\n",
    "B = M.addVars(S,T)\n",
    "X = M.addVars([(i,j,t) for i in S for j in S if i!=j for t in T])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c262507",
   "metadata": {},
   "source": [
    "## Constraints"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fd8cbb9",
   "metadata": {},
   "source": [
    "### Compulsory constraints"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f143c19",
   "metadata": {},
   "source": [
    "1) The number of bikes across all stations at any time must not exceed the available number of bikes Divvy has,  $$\\sum_{i\\in I} B_{i,t} \\le A $$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4097c64a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'morning': <gurobi.Constr *Awaiting Model Update*>,\n",
       " 'night': <gurobi.Constr *Awaiting Model Update*>}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M.addConstrs(quicksum(B[i,t] for i in S) <= A for t in T)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6252598",
   "metadata": {},
   "source": [
    "2) The number of bikes at a station should fit within the available capacity, $$B_{i,t} \\le C_{i} $$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6f65c48f",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in S:\n",
    "    capacity = int(C.where('id', i).column('dpcapacity')[0])\n",
    "    for t in T:\n",
    "        M.addConstr(B[i,t] <= capacity*12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d5ed3f1",
   "metadata": {},
   "source": [
    "3) The number of bikes to be repositioned from station $i$ to station $j$ in time period $t$ must not be more than the number of bikes station $i$ currently has in time period $t$, $$B_{i,t} = B_{i,t-1} + \\sum_{j\\in J} X_{j,i,t} + \\sum_{j\\in J} U_{j,i,t} - \\sum_{j\\in J} X_{i,j,t} - \\sum_{j\\in J} U_{i,j,t}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "41a2af1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "for t in T:\n",
    "    if (t == \"morning\"):\n",
    "        t_minusone = \"night\"\n",
    "        for i in S:\n",
    "            M.addConstr(B[i,t] == B[i,t_minusone] + quicksum(X[j,i,t] for j in S if i!=j) + U_jit.column(str(i))[0] - quicksum(X[i,j,t] for j in S if i!=j) - U_ijt.column(str(i))[0])\n",
    "    else:\n",
    "        t_minusone = \"morning\"\n",
    "        for i in S:\n",
    "            M.addConstr(B[i,t] == B[i,t_minusone] + quicksum(X[j,i,t] for j in S if i!=j) + U_jit.column(str(i))[1] - quicksum(X[i,j,t] for j in S if i!=j) - U_ijt.column(str(i))[1])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07136457",
   "metadata": {},
   "source": [
    "4) $X_{i,j,t}$ and $B_{i,t}$ must be positive integers\\\n",
    "In our business constraints below, we are setting the minimum number of bikes at a station ($B_{i,t}$) to be bigger or equal to the historical number of bikes picked up from that station, which obviously will be a positive number. Therefore, we only need to add the constraint that our decision variable $X_{i,j,t}$ is positive "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "69732209",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in S:\n",
    "    for t in T:\n",
    "        for j in S:\n",
    "            if (i != j):\n",
    "                M.addConstr(X[i,j,t] >= 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3b550af",
   "metadata": {},
   "source": [
    "### Business constraints"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f2e4016",
   "metadata": {},
   "source": [
    "1) To account for unpredictable behavior, all stations at any given time should have at least the historical number of bikes picked up from that station in the next time period $t+1$  , $$B_{i,t} \\ge \\sum_{j\\in J} U_{i,j,t+1}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4fbbc107",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in S:\n",
    "    for t in T:\n",
    "        if (t == 'morning'):\n",
    "            M.addConstr(B[i,t] >= U_ijt.column(str(i))[1]) # if t is morning, t+1 will be night\n",
    "        else:\n",
    "            M.addConstr(B[i,t] >= U_ijt.column(str(i))[0]) # if t is night, t+1 will be morning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "972e7618",
   "metadata": {},
   "source": [
    "2) To account for unpredictable behavior, all stations at time $t$ should have a maximum of slots available equal to the difference between that station's capacity and the historical number of bikes dropped off at that station in the next time period $t+1$, $$B_{i,t} \\le C_{i} - \\sum_{j\\in J} U_{j,i,t+1}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a99d420a",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in S:\n",
    "    capacity = int(C.where('id', i).column('dpcapacity')[0])\n",
    "    for t in T:\n",
    "        if (t == 'morning'):\n",
    "            M.addConstr(B[i,t] <= capacity*12 - U_jit.column(str(i))[1]) # if t is morning, t+1 will be night\n",
    "        else:\n",
    "            M.addConstr(B[i,t] <= capacity*12 - U_jit.column(str(i))[0]) # if t is night, t+1 will be morning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4dcec3a",
   "metadata": {},
   "source": [
    "## Optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7609ef49",
   "metadata": {},
   "source": [
    "The model takes into account the previously mentioned constraints and parameters to provide an optimal capacity fulfilment and empty slots per timeframe (morning/night).\n",
    "However, after running the model and relaxing the business assumptions, an optimal logistic scheme was unfeasible with the current (limited) resources and constraints. Please note we included an automatic flexibility of the assumptions for the model, as the current required constraints limit our ability to provide a schedule recommendation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3756c324",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = quicksum(X[j,i,t]*D.where(\"id\", i).column(str(j))[0] for t in T for i in S for j in S if i!=j)\n",
    "M.setObjective(z, GRB.MINIMIZE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9d64bb95",
   "metadata": {},
   "outputs": [],
   "source": [
    "M.update()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a991021c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimize\n",
      "<gurobi.LinExpr: 2.7275680340704915 C10 + 2.7275680340704915 C11\n",
      "+ 1.3164477825107272 C12 + 1.3164477825107272 C13 + 4.085493818947044 C14\n",
      "+ 4.085493818947044 C15 + 2.4828215756003513 C16 + 2.4828215756003513 C17\n",
      "+ 2.7275680340704915 C18 + 2.7275680340704915 C19 + 1.9317872604973294 C20\n",
      "+ 1.9317872604973294 C21 + 5.276744910651863 C22 + 5.276744910651863 C23\n",
      "+ 3.766450417517531 C24 + 3.766450417517531 C25 + 1.3164477825107272 C26\n",
      "+ 1.3164477825107272 C27 + 1.9317872604973294 C28 + 1.9317872604973294 C29\n",
      "+ 5.167652997782674 C30 + 5.167652997782674 C31 + 3.5175197666111884 C32\n",
      "+ 3.5175197666111884 C33 + 4.085493818947044 C34 + 4.085493818947044 C35\n",
      "+ 5.276744910651863 C36 + 5.276744910651863 C37 + 5.167652997782674 C38\n",
      "+ 5.167652997782674 C39 + 1.6508535620486084 C40 + 1.6508535620486084 C41\n",
      "+ 2.4828215756003513 C42 + 2.4828215756003513 C43 + 3.766450417517531 C44\n",
      "+ 3.766450417517531 C45 + 3.5175197666111884 C46 + 3.5175197666111884 C47\n",
      "+ 1.6508535620486084 C48 + 1.6508535620486084 C49>\n",
      "Subject To\n",
      "  R0: <gurobi.LinExpr: C0 + C2 + C4 + C6 + C8> <= 49526\n",
      "  R1: <gurobi.LinExpr: C1 + C3 + C5 + C7 + C9> <= 49526\n",
      "  R2: <gurobi.LinExpr: C0> <= 564\n",
      "  R3: <gurobi.LinExpr: C1> <= 564\n",
      "  R4: <gurobi.LinExpr: C2> <= 564\n",
      "  R5: <gurobi.LinExpr: C3> <= 564\n",
      "  R6: <gurobi.LinExpr: C4> <= 468\n",
      "  R7: <gurobi.LinExpr: C5> <= 468\n",
      "  R8: <gurobi.LinExpr: C6> <= 276\n",
      "  R9: <gurobi.LinExpr: C7> <= 276\n",
      "  R10: <gurobi.LinExpr: C8> <= 468\n",
      "  R11: <gurobi.LinExpr: C9> <= 468\n",
      "R12: <gurobi.LinExpr: C0 + -1.0 C1 + C10 + C12 + C14 + C16 + -1.0 C18 + -1.0 C26 + -1.0\n",
      " C34 + -1.0 C42> = 24.5156\n",
      "R13: <gurobi.LinExpr: C2 + -1.0 C3 + -1.0 C10 + C18 + C20 + C22 + C24 + -1.0 C28 + -1.0\n",
      " C36 + -1.0 C44> = -44.2404\n",
      "R14: <gurobi.LinExpr: C4 + -1.0 C5 + -1.0 C12 + -1.0 C20 + C26 + C28 + C30 + C32 + -1.0\n",
      " C38 + -1.0 C46> = 2.49847\n",
      "R15: <gurobi.LinExpr: C6 + -1.0 C7 + -1.0 C14 + -1.0 C22 + -1.0 C30 + C34 + C36 + C38 +\n",
      " C40 + -1.0 C48> = 11.1317\n",
      "R16: <gurobi.LinExpr: C8 + -1.0 C9 + -1.0 C16 + -1.0 C24 + -1.0 C32 + -1.0 C40 + C42 +\n",
      " C44 + C46 + C48> = 9.42454\n",
      "R17: <gurobi.LinExpr: -1.0 C0 + C1 + C11 + C13 + C15 + C17 + -1.0 C19 + -1.0 C27 + -1.0\n",
      " C35 + -1.0 C43> = 4.61202\n",
      "R18: <gurobi.LinExpr: -1.0 C2 + C3 + -1.0 C11 + C19 + C21 + C23 + C25 + -1.0 C29 + -1.0\n",
      " C37 + -1.0 C45> = 58.0944\n",
      "R19: <gurobi.LinExpr: -1.0 C4 + C5 + -1.0 C13 + -1.0 C21 + C27 + C29 + C31 + C33 + -1.0\n",
      " C39 + -1.0 C47> = -12.4047\n",
      "R20: <gurobi.LinExpr: -1.0 C6 + C7 + -1.0 C15 + -1.0 C23 + -1.0 C31 + C35 + C37 + C39 +\n",
      " C41 + -1.0 C49> = -0.403678\n",
      "R21: <gurobi.LinExpr: -1.0 C8 + C9 + -1.0 C17 + -1.0 C25 + -1.0 C33 + -1.0 C41 + C43 +\n",
      " C45 + C47 + C49> = 11.2886\n",
      "  R22: <gurobi.LinExpr: C10> >= 0\n",
      "  R23: <gurobi.LinExpr: C12> >= 0\n",
      "  R24: <gurobi.LinExpr: C14> >= 0\n",
      "  R25: <gurobi.LinExpr: C16> >= 0\n",
      "  R26: <gurobi.LinExpr: C11> >= 0\n",
      "  R27: <gurobi.LinExpr: C13> >= 0\n",
      "  R28: <gurobi.LinExpr: C15> >= 0\n",
      "  R29: <gurobi.LinExpr: C17> >= 0\n",
      "  R30: <gurobi.LinExpr: C18> >= 0\n",
      "  R31: <gurobi.LinExpr: C20> >= 0\n",
      "  R32: <gurobi.LinExpr: C22> >= 0\n",
      "  R33: <gurobi.LinExpr: C24> >= 0\n",
      "  R34: <gurobi.LinExpr: C19> >= 0\n",
      "  R35: <gurobi.LinExpr: C21> >= 0\n",
      "  R36: <gurobi.LinExpr: C23> >= 0\n",
      "  R37: <gurobi.LinExpr: C25> >= 0\n",
      "  R38: <gurobi.LinExpr: C26> >= 0\n",
      "  R39: <gurobi.LinExpr: C28> >= 0\n",
      "  R40: <gurobi.LinExpr: C30> >= 0\n",
      "  R41: <gurobi.LinExpr: C32> >= 0\n",
      "  R42: <gurobi.LinExpr: C27> >= 0\n",
      "  R43: <gurobi.LinExpr: C29> >= 0\n",
      "  R44: <gurobi.LinExpr: C31> >= 0\n",
      "  R45: <gurobi.LinExpr: C33> >= 0\n",
      "  R46: <gurobi.LinExpr: C34> >= 0\n",
      "  R47: <gurobi.LinExpr: C36> >= 0\n",
      "  R48: <gurobi.LinExpr: C38> >= 0\n",
      "  R49: <gurobi.LinExpr: C40> >= 0\n",
      "  R50: <gurobi.LinExpr: C35> >= 0\n",
      "  R51: <gurobi.LinExpr: C37> >= 0\n",
      "  R52: <gurobi.LinExpr: C39> >= 0\n",
      "  R53: <gurobi.LinExpr: C41> >= 0\n",
      "  R54: <gurobi.LinExpr: C42> >= 0\n",
      "  R55: <gurobi.LinExpr: C44> >= 0\n",
      "  R56: <gurobi.LinExpr: C46> >= 0\n",
      "  R57: <gurobi.LinExpr: C48> >= 0\n",
      "  R58: <gurobi.LinExpr: C43> >= 0\n",
      "  R59: <gurobi.LinExpr: C45> >= 0\n",
      "  R60: <gurobi.LinExpr: C47> >= 0\n",
      "  R61: <gurobi.LinExpr: C49> >= 0\n",
      "  R62: <gurobi.LinExpr: C0> >= 275.607\n",
      "  R63: <gurobi.LinExpr: C1> >= 59.0339\n",
      "  R64: <gurobi.LinExpr: C2> >= 84.2717\n",
      "  R65: <gurobi.LinExpr: C3> >= 94.5355\n",
      "  R66: <gurobi.LinExpr: C4> >= 142.78\n",
      "  R67: <gurobi.LinExpr: C5> >= 38.4512\n",
      "  R68: <gurobi.LinExpr: C6> >= 138.145\n",
      "  R69: <gurobi.LinExpr: C7> >= 35.1796\n",
      "  R70: <gurobi.LinExpr: C8> >= 140.791\n",
      "  R71: <gurobi.LinExpr: C9> >= 29.1193\n",
      "  R72: <gurobi.LinExpr: C0> <= 283.781\n",
      "  R73: <gurobi.LinExpr: C1> <= 480.451\n",
      "  R74: <gurobi.LinExpr: C2> <= 421.634\n",
      "  R75: <gurobi.LinExpr: C3> <= 513.705\n",
      "  R76: <gurobi.LinExpr: C4> <= 337.625\n",
      "  R77: <gurobi.LinExpr: C5> <= 427.05\n",
      "  R78: <gurobi.LinExpr: C6> <= 138.258\n",
      "  R79: <gurobi.LinExpr: C7> <= 229.689\n",
      "  R80: <gurobi.LinExpr: C8> <= 315.92\n",
      "  R81: <gurobi.LinExpr: C9> <= 429.456\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(M.display())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2c8b44fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[x86])\n",
      "Thread count: 4 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 82 rows, 50 columns and 180 nonzeros\n",
      "Model fingerprint: 0xa8d96b70\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+00]\n",
      "  Objective range  [1e+00, 5e+00]\n",
      "  Bounds range     [0e+00, 0e+00]\n",
      "  RHS range        [4e-01, 5e+04]\n",
      "Presolve removed 72 rows and 5 columns\n",
      "Presolve time: 0.01s\n",
      "\n",
      "Solved in 0 iterations and 0.01 seconds (0.00 work units)\n",
      "Infeasible model\n"
     ]
    }
   ],
   "source": [
    "M.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e54dc180",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration    Objective       Primal Inf.    Dual Inf.      Time\n",
      "       0    0.0000000e+00   1.216528e+03   0.000000e+00      0s\n",
      "\n",
      "IIS computed: 10 constraints and 0 bounds\n",
      "IIS runtime: 0.01 seconds (0.00 work units)\n"
     ]
    }
   ],
   "source": [
    "# This function helps us detect the source of infeasibility in our model, \n",
    "# and it seems that our 3rd constraint is what causes the model to be infeasible\n",
    "M.computeIIS() \n",
    "M.write(\"model.ilp\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2e5a63e",
   "metadata": {},
   "source": [
    "Since our model is infeasible, we decide to call the feasRelaxS() function on our model M, which modifies our model to create a feasibility relaxation, while minimizing the amount by which the solution violates the bounds and linear constraints of the original model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "09d4badf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[x86])\n",
      "Thread count: 4 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 132 rows, 192 columns and 372 nonzeros\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+00]\n",
      "  Objective range  [1e+00, 1e+00]\n",
      "  Bounds range     [0e+00, 0e+00]\n",
      "  RHS range        [4e-01, 5e+04]\n",
      "Iteration    Objective       Primal Inf.    Dual Inf.      Time\n",
      "       0      handle free variables                          0s\n",
      "      38    6.4516508e+01   0.000000e+00   0.000000e+00      0s\n",
      "\n",
      "Solved in 38 iterations and 0.01 seconds (0.00 work units)\n",
      "Optimal objective  6.451650767e+01\n"
     ]
    }
   ],
   "source": [
    "M.feasRelaxS(0, False, True, True)\n",
    "M.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ab37fbeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal value of the objective function is:  64.51650767128933\n"
     ]
    }
   ],
   "source": [
    "print(\"Optimal value of the objective function is: \",M.objVal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d3bc02a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number bikes at station (35, 'morning') is: 276\n",
      "The number bikes at station (35, 'night') is: 241\n",
      "The number bikes at station (192, 'morning') is: 85\n",
      "The number bikes at station (192, 'night') is: 129\n",
      "The number bikes at station (76, 'morning') is: 143\n",
      "The number bikes at station (76, 'night') is: 120\n",
      "The number bikes at station (177, 'morning') is: 139\n",
      "The number bikes at station (177, 'night') is: 138\n",
      "The number bikes at station (268, 'morning') is: 141\n",
      "The number bikes at station (268, 'night') is: 153\n"
     ]
    }
   ],
   "source": [
    "for i in B:\n",
    "    # rounding up the number of bikes because they have to be integers\n",
    "    print(\"The number bikes at station\", i, \"is:\", math.ceil(B[i].X)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2726d286",
   "metadata": {},
   "source": [
    "\n",
    "| Time    |35 |192|76 |177|268|\n",
    "|:--------|---|---|---|---|---|\n",
    "|Morning  |276|85|143|139|141|\n",
    "|Night    |241|129 |120 |138 |153 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "fbbf15e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number bikes of to be repositioned  (35, 76, 'night') is: 40\n",
      "The number bikes of to be repositioned  (192, 76, 'night') is: 14\n",
      "The number bikes of to be repositioned  (177, 35, 'morning') is: 11\n",
      "The number bikes of to be repositioned  (268, 76, 'morning') is: 21\n"
     ]
    }
   ],
   "source": [
    "for i in X:\n",
    "    if (X[i].X != 0):\n",
    "        # rounding up the number of bikes because they have to be integers\n",
    "        print(\"The number bikes of to be repositioned \", i, \"is:\", math.ceil(X[i].X))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8893ddae",
   "metadata": {},
   "source": [
    "As we can see from the results above, this is the suggested logistic scheme of bikes to transport between the top 5 stations. The interpretation of the results is as follows:\n",
    "Throughout the morning of any given day, the required number of bikes to be reposition from station 177 to station 35 is 11, the required number of bikes to be reposition from station 268 to station 76 is 21. Throughout the night of any given day, the required number of bikes to be reposition from station 35 to station 76 is 40, and the required number of bikes to be reposition from station 192 to station 76 is 14"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48ab36b7",
   "metadata": {},
   "source": [
    "## SENSITIVITY ANALYSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fa03dbb",
   "metadata": {},
   "source": [
    "Regarding the sensitivity and managerial analysis of the model, we are proposing two scenarios to conduct further analysis in: the change in the time sections considered and change in the minimal number of transports with less bikes. We are focusing on variability in a resource the company can control (total number of bikes), and with further data on operational costs and revenue, how this insight might lead to a revaluation on the optimal number of bikes to manage."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebde13cf",
   "metadata": {},
   "source": [
    "#### 1) Changing the constraint for unlimited resources will showcase the absolute minimum transports. After setting the new constraints, we find that the number of transports doesn’t decrease, it actually remains stable even if we decrease the number of available bikes by ~600."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0fc01db1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Constraint        Sense        Slack           Pi          RHS     SARHSLow      SARHSUp \n",
      "------------------------------------------------------------------------------------------\n",
      "          R0            <      48744.4            0        49526      781.594          inf \n",
      "          R1            <      48747.7            0        49526      778.264          inf \n",
      "          R2            <      288.393            0          564      275.607          inf \n",
      "          R3            <      323.637            0          564      240.363          inf \n",
      "          R4            <      479.728            0          564      84.2717          inf \n",
      "          R5            <      435.488            0          564      128.512          inf \n",
      "          R6            <       325.22            0          468       142.78          inf \n",
      "          R7            <      348.432            0          468      119.568          inf \n",
      "          R8            <      137.855            0          276      138.145          inf \n",
      "          R9            <      138.258            0          276      137.742          inf \n",
      "         R10            <      327.209            0          468      140.791          inf \n",
      "         R11            <       315.92            0          468       152.08          inf \n",
      "         R12            =            0            1      24.5156     -15.3401      205.845 \n",
      "         R13            =            0            1     -44.2404     -58.0944     -10.2638 \n",
      "         R14            =            0            1      2.49847      -62.018      83.6153 \n",
      "         R15            =            0            1      11.1317     0.403678      192.461 \n",
      "         R16            =            0            1      9.42454     -11.2886      90.5414 \n",
      "         R17            =            0            1      4.61202     -35.2436          inf \n",
      "         R18            =            0            1      58.0944      44.2404          inf \n",
      "         R19            =            0            1     -12.4047     -76.9212          inf \n",
      "         R20            =            0            1    -0.403678     -11.1317      91.5434 \n",
      "         R21            =            0            1      11.2886     -9.42454      92.4054 \n",
      "         R22            >            0            0            0            0      33.9767 \n",
      "         R23            >            0            0            0            0      39.8556 \n",
      "         R24            >            0            0            0            0          inf \n",
      "         R25            >            0            0            0            0      39.8556 \n",
      "         R26            >            0            0            0            0      39.8556 \n",
      "         R27            >     -39.8556            0            0         -inf      39.8556 \n",
      "         R28            >            0            0            0            0       91.947 \n",
      "         R29            >            0            0            0            0      39.8556 \n",
      "         R30            >            0            0            0            0      13.8539 \n",
      "         R31            >            0            0            0            0      13.8539 \n",
      "         R32            >            0            0            0            0      13.8539 \n",
      "         R33            >            0            0            0            0      13.8539 \n",
      "         R34            >            0            0            0            0      13.8539 \n",
      "         R35            >     -13.8539            0            0         -inf      13.8539 \n",
      "         R36            >            0            0            0            0      13.8539 \n",
      "         R37            >            0            0            0            0      13.8539 \n",
      "         R38            >            0            0            0            0      181.329 \n",
      "         R39            >            0            0            0            0      33.9767 \n",
      "         R40            >            0            0            0            0      181.329 \n",
      "         R41            >            0            0            0            0          inf \n",
      "         R42            >            0            0            0            0          inf \n",
      "         R43            >            0            0            0            0          inf \n",
      "         R44            >            0            0            0            0       91.947 \n",
      "         R45            >            0            0            0            0      81.1168 \n",
      "         R46            >     -10.7281            0            0         -inf      10.7281 \n",
      "         R47            >            0            0            0            0      10.7281 \n",
      "         R48            >            0            0            0            0      10.7281 \n",
      "         R49            >            0            0            0            0      10.7281 \n",
      "         R50            >            0            0            0            0      10.7281 \n",
      "         R51            >            0            0            0            0      10.7281 \n",
      "         R52            >            0            0            0            0      10.7281 \n",
      "         R53            >            0            0            0            0      10.7281 \n",
      "         R54            >            0            0            0            0      20.7131 \n",
      "         R55            >            0            0            0            0      20.7131 \n",
      "         R56            >     -20.7131            0            0         -inf      20.7131 \n",
      "         R57            >            0            0            0            0      20.7131 \n",
      "         R58            >            0            0            0            0      20.7131 \n",
      "         R59            >            0            0            0            0      20.7131 \n",
      "         R60            >            0            0            0            0      20.7131 \n",
      "         R61            >            0            0            0            0      20.7131 \n",
      "         R62            >            0            0      275.607      94.2775      283.781 \n",
      "         R63            >     -181.329            0      59.0339         -inf      240.363 \n",
      "         R64            >            0            0      84.2717      50.2951      421.634 \n",
      "         R65            >     -33.9767            0      94.5355         -inf      128.512 \n",
      "         R66            >            0            0       142.78      61.6628      337.625 \n",
      "         R67            >     -81.1168            0      38.4512         -inf      119.568 \n",
      "         R68            >            0            0      138.145      35.5833      138.258 \n",
      "         R69            >     -102.562            0      35.1796         -inf      137.742 \n",
      "         R70            >            0            0      140.791      17.8307       315.92 \n",
      "         R71            >      -122.96            0      29.1193         -inf       152.08 \n",
      "         R72            <      8.17486            0      283.781      275.607          inf \n",
      "         R73            <      240.088            0      480.451      240.363          inf \n",
      "         R74            <      337.362            0      421.634      84.2717          inf \n",
      "         R75            <      385.193            0      513.705      128.512          inf \n",
      "         R76            <      194.845            0      337.625       142.78          inf \n",
      "         R77            <      307.482            0       427.05      119.568          inf \n",
      "         R78            <     0.113176            0      138.258      138.145          inf \n",
      "         R79            <       91.947            0      229.689      137.742          inf \n",
      "         R80            <      175.129            0       315.92      140.791          inf \n",
      "         R81            <      277.377            0      429.456       152.08          inf \n",
      "    CArtL_C0            >     -275.607            0            0         -inf      275.607 \n",
      "    CArtL_C1            >     -240.363            0            0         -inf      240.363 \n",
      "    CArtL_C2            >     -84.2717            0            0         -inf      84.2717 \n",
      "    CArtL_C3            >     -128.512            0            0         -inf      128.512 \n",
      "    CArtL_C4            >      -142.78            0            0         -inf       142.78 \n",
      "    CArtL_C5            >     -119.568            0            0         -inf      119.568 \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    CArtL_C6            >     -138.145            0            0         -inf      138.145 \n",
      "    CArtL_C7            >     -137.742            0            0         -inf      137.742 \n",
      "    CArtL_C8            >     -140.791            0            0         -inf      140.791 \n",
      "    CArtL_C9            >      -152.08            0            0         -inf       152.08 \n",
      "   CArtL_C10            >           -0            0            0         -inf            0 \n",
      "   CArtL_C11            >           -0            0            0         -inf            0 \n",
      "   CArtL_C12            >           -0            0            0         -inf            0 \n",
      "   CArtL_C13            >     -39.8556            0            0         -inf      39.8556 \n",
      "   CArtL_C14            >           -0            0            0         -inf            0 \n",
      "   CArtL_C15            >           -0            0            0         -inf            0 \n",
      "   CArtL_C16            >           -0            0            0         -inf            0 \n",
      "   CArtL_C17            >           -0            0            0         -inf            0 \n",
      "   CArtL_C18            >           -0            0            0         -inf            0 \n",
      "   CArtL_C19            >           -0            0            0         -inf            0 \n",
      "   CArtL_C20            >           -0            0            0         -inf            0 \n",
      "   CArtL_C21            >     -13.8539            0            0         -inf      13.8539 \n",
      "   CArtL_C22            >           -0            0            0         -inf            0 \n",
      "   CArtL_C23            >           -0            0            0         -inf            0 \n",
      "   CArtL_C24            >           -0            0            0         -inf            0 \n",
      "   CArtL_C25            >           -0            0            0         -inf            0 \n",
      "   CArtL_C26            >           -0            0            0         -inf            0 \n",
      "   CArtL_C27            >           -0            0            0         -inf            0 \n",
      "   CArtL_C28            >           -0            0            0         -inf            0 \n",
      "   CArtL_C29            >           -0            0            0         -inf            0 \n",
      "   CArtL_C30            >           -0            0            0         -inf            0 \n",
      "   CArtL_C31            >           -0            0            0         -inf            0 \n",
      "   CArtL_C32            >           -0            0            0         -inf            0 \n",
      "   CArtL_C33            >           -0            0            0         -inf            0 \n",
      "   CArtL_C34            >     -10.7281            0            0         -inf      10.7281 \n",
      "   CArtL_C35            >           -0            0            0         -inf            0 \n",
      "   CArtL_C36            >           -0            0            0         -inf            0 \n",
      "   CArtL_C37            >           -0            0            0         -inf            0 \n",
      "   CArtL_C38            >           -0            0            0         -inf            0 \n",
      "   CArtL_C39            >           -0            0            0         -inf            0 \n",
      "   CArtL_C40            >           -0            0            0         -inf            0 \n",
      "   CArtL_C41            >           -0            0            0         -inf            0 \n",
      "   CArtL_C42            >           -0            0            0         -inf            0 \n",
      "   CArtL_C43            >           -0            0            0         -inf            0 \n",
      "   CArtL_C44            >           -0            0            0         -inf            0 \n",
      "   CArtL_C45            >           -0            0            0         -inf            0 \n",
      "   CArtL_C46            >     -20.7131            0            0         -inf      20.7131 \n",
      "   CArtL_C47            >           -0            0            0         -inf            0 \n",
      "   CArtL_C48            >           -0            0            0         -inf            0 \n",
      "   CArtL_C49            >           -0            0            0         -inf            0 \n"
     ]
    }
   ],
   "source": [
    "# sensitivity analysis for the constraints\n",
    "M.printAttr(['Sense', 'Slack', 'Pi', 'RHS', 'SARHSLow', 'SARHSUp'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68b5fb04",
   "metadata": {},
   "source": [
    "#### Conclusion:\n",
    "As we can see from the sensitivity analysis above (R0 & R1), our optimal solution will not change even if we increase the number of bikes infinitely. Since infitnite increase of bikes does not change the total number of transports, it isn’t worth it to explore an expansion in resources from a financial (profit optimization) perspective. However, if for some reasons, we have to decrease the number of bikes we have, the maximum amount of bikes can be decreased before the our optimal solution changes are 781 bikes for the morning time period, and 778 bikes for the night time period."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1048c084",
   "metadata": {},
   "source": [
    "#### 2) To increase the precision of the logistic scheme, we conducted a sensitivity analysis to determine how to the optimal schedule changes by adding another time section (“afternoon”):"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dfd737a",
   "metadata": {},
   "source": [
    "#### Re-running the model after adding another time section\n",
    "Our time sections are as follows:\\\n",
    "Morning (from 5AM to 12PM)\\\n",
    "Afternoon (from 1PM to 8PM)\\\n",
    "Night (from 9PM to 4AM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0f06e3cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>time</th> <th>35</th> <th>192</th> <th>76</th> <th>177</th> <th>268</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>morning  </td> <td>85.9661</td> <td>98.0275</td> <td>54.8364</td> <td>47.7143</td> <td>40.4294</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>afternoon</td> <td>229.322</td> <td>77.8907</td> <td>116.164</td> <td>119.921</td> <td>121.74 </td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>night    </td> <td>25.5379</td> <td>4.2071 </td> <td>15.3828</td> <td>8.73944</td> <td>9.37762</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "time      | 35      | 192     | 76      | 177     | 268\n",
       "morning   | 85.9661 | 98.0275 | 54.8364 | 47.7143 | 40.4294\n",
       "afternoon | 229.322 | 77.8907 | 116.164 | 119.921 | 121.74\n",
       "night     | 25.5379 | 4.2071  | 15.3828 | 8.73944 | 9.37762"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "busiest_origin_stations_traffic = Table().with_columns('id', busiest_origin_stations.take(np.arange(5)).column('id')).join('id', trips.select('from_station_id', 'start_time'), 'from_station_id')\n",
    "date_array = [\"\" for i in range(busiest_origin_stations_traffic.num_rows)]\n",
    "time_array = [\"\" for i in range(busiest_origin_stations_traffic.num_rows)]\n",
    "for i in np.arange(busiest_origin_stations_traffic.num_rows):\n",
    "    date_array[i] = busiest_origin_stations_traffic.column('start_time')[i].split(' ')[0]\n",
    "    t = int(busiest_origin_stations_traffic.column('start_time')[i].split(' ')[1].split(':')[0])\n",
    "    if (5 <= t <= 12):\n",
    "        time_array[i] = 'morning'\n",
    "    elif (13 <= t <= 20):\n",
    "        time_array[i] = 'afternoon'\n",
    "    elif (t >= 21 or t <= 4):\n",
    "        time_array[i] = 'night'\n",
    "busiest_origin_stations_traffic = busiest_origin_stations_traffic.with_columns('date', date_array, 'time', time_array).group(['id','date', 'time'])\n",
    "U_ijt = Table().with_column('time', ['morning', 'afternoon', 'night'])\n",
    "traffic_count = np.zeros(len(U_ijt.column('time')))\n",
    "def avg_traffic(id):\n",
    "    global U_ijt\n",
    "    for i in np.arange(len(U_ijt.column('time'))):\n",
    "        count = busiest_origin_stations_traffic.where('id', id).where('time', U_ijt[0][i]).column('count')\n",
    "        traffic_count[i] = sum(count)/len(count)\n",
    "    U_ijt = U_ijt.with_column(str(id), [traffic_count[0], traffic_count[1], traffic_count[2]])\n",
    "for i in np.arange(busiest_origin_stations.take(np.arange(5)).num_rows):\n",
    "    avg_traffic(busiest_origin_stations.take(np.arange(5)).column('id')[i])\n",
    "U_ijt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "52401991",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>time</th> <th>35</th> <th>192</th> <th>268</th> <th>177</th> <th>76</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>morning  </td> <td>117.764</td> <td>53.5326</td> <td>55.5   </td> <td>63.4438</td> <td>55.3354</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>afternoon</td> <td>236.066</td> <td>135.665</td> <td>129.074</td> <td>115.655</td> <td>109.017</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>night    </td> <td>16.0692</td> <td>4.39264</td> <td>8.86232</td> <td>7.72993</td> <td>10.8667</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "time      | 35      | 192     | 268     | 177     | 76\n",
       "morning   | 117.764 | 53.5326 | 55.5    | 63.4438 | 55.3354\n",
       "afternoon | 236.066 | 135.665 | 129.074 | 115.655 | 109.017\n",
       "night     | 16.0692 | 4.39264 | 8.86232 | 7.72993 | 10.8667"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "busiest_dest_stations_traffic = Table().with_columns('id', busiest_dest_stations.take(np.arange(5)).column('id')).join('id', trips.select('to_station_id', 'start_time'), 'to_station_id')\n",
    "date_array = [\"\" for i in range(busiest_dest_stations_traffic.num_rows)]\n",
    "time_array = [\"\" for i in range(busiest_dest_stations_traffic.num_rows)]\n",
    "for i in np.arange(busiest_dest_stations_traffic.num_rows):\n",
    "    date_array[i] = busiest_dest_stations_traffic.column('start_time')[i].split(' ')[0]\n",
    "    t = int(busiest_dest_stations_traffic.column('start_time')[i].split(' ')[1].split(':')[0])\n",
    "    if (5 <= t <= 12):\n",
    "        time_array[i] = 'morning'\n",
    "    elif (13 <= t <= 20):\n",
    "        time_array[i] = 'afternoon'\n",
    "    elif (t >= 21 or t <= 4):\n",
    "        time_array[i] = 'night'\n",
    "busiest_dest_stations_traffic = busiest_dest_stations_traffic.with_columns('date', date_array, 'time', time_array).group(['id','date', 'time'])\n",
    "busiest_dest_stations_traffic\n",
    "U_jit = Table().with_column('time', ['morning', 'afternoon', 'night'])\n",
    "traffic_count = np.zeros(len(U_jit.column('time')))\n",
    "def avg_traffic(id):\n",
    "    global U_jit \n",
    "    for i in np.arange(len(U_jit .column('time'))):\n",
    "        count = busiest_dest_stations_traffic.where('id', id).where('time', U_jit[0][i]).column('count')\n",
    "        traffic_count[i] = sum(count)/len(count)\n",
    "    U_jit = U_jit .with_column(str(id), [traffic_count[0], traffic_count[1], traffic_count[2]])\n",
    "for i in np.arange(busiest_dest_stations.take(np.arange(5)).num_rows):\n",
    "    avg_traffic(busiest_dest_stations.take(np.arange(5)).column('id')[i])\n",
    "U_jit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "51e0e69d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33084.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A is the number of bikes available for each time period (8 hours each)\n",
    "A = len(np.unique(trips.column('bikeid')))*8\n",
    "\n",
    "# Set the a fixed number of bikes for all the stations that are not included in the model (20%)\n",
    "array = stations.column('dpcapacity')*8*0.2 \n",
    "\n",
    "fixed_num_of_bikes = Table().with_columns('id', stations.column('id'),\n",
    "                                             'fixed number of bikes', [int(x) for x in array])\n",
    "five_busiest_stations = np.zeros(5)\n",
    "# extracting the set number of bikes for 5 busiest stations\n",
    "for i in np.arange(5):\n",
    "    five_busiest_stations[i] = fixed_num_of_bikes.where('id', are.equal_to(busiest_origin_stations.take(np.arange(5)).column('id')[i])).column('fixed number of bikes')[0]\n",
    "\n",
    "# A equals to the total amount of unique bikes minus the total number of bikes set for all stations \n",
    "# plus the fixed amount of bikes set for 5 busiest stations\n",
    "A = A - sum(fixed_num_of_bikes.column('fixed number of bikes')) + sum(five_busiest_stations) \n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e3598dd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "S = busiest_origin_stations.take(np.arange(5)).column('id')\n",
    "T = ['morning', 'afternoon','night']\n",
    "\n",
    "B = {} # optimal number of bikes at a station \n",
    "X = {} # optimal number of bikes to be repositioned\n",
    "B = M.addVars(S,T)\n",
    "X = M.addVars([(i,j,t) for i in S for j in S if i!=j for t in T])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "3728cc95",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1st constraint\n",
    "M.addConstrs(quicksum(B[i,t] for i in S) <= A for t in T)\n",
    "#3rd constraint\n",
    "for t in T:\n",
    "    if (t == \"morning\"):\n",
    "        t_minusone = \"night\"\n",
    "        for i in S:\n",
    "            M.addConstr(B[i,t] == B[i,t_minusone] + quicksum(X[j,i,t] for j in S if i!=j) + U_jit.column(str(i))[0] - quicksum(X[i,j,t] for j in S if i!=j) - U_ijt.column(str(i))[0])\n",
    "    elif (t == \"afternoon\"):\n",
    "        t_minusone = \"morning\"\n",
    "        for i in S:\n",
    "            M.addConstr(B[i,t] == B[i,t_minusone] + quicksum(X[j,i,t] for j in S if i!=j) + U_jit.column(str(i))[1] - quicksum(X[i,j,t] for j in S if i!=j) - U_ijt.column(str(i))[1])\n",
    "    elif (t == \"night\"):\n",
    "        t_minusone = \"afternoon\"\n",
    "        for i in S:\n",
    "            M.addConstr(B[i,t] == B[i,t_minusone] + quicksum(X[j,i,t] for j in S if i!=j) + U_jit.column(str(i))[2] - quicksum(X[i,j,t] for j in S if i!=j) - U_ijt.column(str(i))[2])\n",
    "#4th constraint\n",
    "for i in S:\n",
    "    for t in T:\n",
    "        for j in S:\n",
    "            if (i != j):\n",
    "                M.addConstr(X[i,j,t] >= 0)\n",
    "#5th constraint\n",
    "for i in S:\n",
    "    for t in T:\n",
    "        if (t == 'morning'):\n",
    "            M.addConstr(B[i,t] >= U_ijt.column(str(i))[1]) #t+1\n",
    "        elif (t == 'afternoon'):\n",
    "            M.addConstr(B[i,t] >= U_ijt.column(str(i))[2])\n",
    "        elif (t == 'night'):\n",
    "            M.addConstr(B[i,t] >= U_ijt.column(str(i))[0])\n",
    "#6th constraint\n",
    "for i in S:\n",
    "    capacity = int(C.where('id', i).column('dpcapacity')[0])\n",
    "    for t in T:\n",
    "        if (t == 'morning'):\n",
    "            M.addConstr(B[i,t] <= capacity*8 - U_jit.column(str(i))[1]) #t+1\n",
    "        elif (t == 'afternoon'):\n",
    "            M.addConstr(B[i,t] <= capacity*8 - U_jit.column(str(i))[2])\n",
    "        elif (t == 'night'):\n",
    "            M.addConstr(B[i,t] >= U_ijt.column(str(i))[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "08991ef3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[x86])\n",
      "Thread count: 4 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 240 rows, 267 columns and 627 nonzeros\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+00]\n",
      "  Objective range  [1e+00, 5e+00]\n",
      "  Bounds range     [0e+00, 0e+00]\n",
      "  RHS range        [2e-01, 5e+04]\n",
      "Iteration    Objective       Primal Inf.    Dual Inf.      Time\n",
      "       0    0.0000000e+00   1.588782e+03   0.000000e+00      0s\n",
      "\n",
      "Solved in 15 iterations and 0.00 seconds (0.00 work units)\n",
      "Infeasible model\n"
     ]
    }
   ],
   "source": [
    "z = quicksum(X[j,i,t]*D.where(\"id\", i).column(str(j))[0] for t in T for i in S for j in S if i!=j)\n",
    "M.setObjective(z, GRB.MINIMIZE)\n",
    "M.update()\n",
    "M.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "db072b62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 9.5.2 build v9.5.2rc0 (mac64[x86])\n",
      "Thread count: 4 physical cores, 8 logical processors, using up to 8 threads\n",
      "Optimize a model with 457 rows, 749 columns and 1326 nonzeros\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+00]\n",
      "  Objective range  [1e+00, 1e+00]\n",
      "  Bounds range     [0e+00, 0e+00]\n",
      "  RHS range        [2e-01, 5e+04]\n",
      "Iteration    Objective       Primal Inf.    Dual Inf.      Time\n",
      "       0      handle free variables                          0s\n",
      "     210    2.0468198e+02   0.000000e+00   0.000000e+00      0s\n",
      "\n",
      "Solved in 210 iterations and 0.01 seconds (0.00 work units)\n",
      "Optimal objective  2.046819750e+02\n"
     ]
    }
   ],
   "source": [
    "M.feasRelaxS(0, False, True, True)\n",
    "M.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "506a0c50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum value of the objective function is:  204.68197503486695\n"
     ]
    }
   ],
   "source": [
    "print(\"Minimum value of the objective function is: \",M.objVal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7f02eb6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number bikes at station (35, 'morning') is: 230\n",
      "The number bikes at station (35, 'afternoon') is: 237\n",
      "The number bikes at station (35, 'night') is: 198\n",
      "The number bikes at station (192, 'morning') is: 78\n",
      "The number bikes at station (192, 'afternoon') is: 136\n",
      "The number bikes at station (192, 'night') is: 187\n",
      "The number bikes at station (76, 'morning') is: 117\n",
      "The number bikes at station (76, 'afternoon') is: 110\n",
      "The number bikes at station (76, 'night') is: 116\n",
      "The number bikes at station (177, 'morning') is: 120\n",
      "The number bikes at station (177, 'afternoon') is: 116\n",
      "The number bikes at station (177, 'night') is: 105\n",
      "The number bikes at station (268, 'morning') is: 122\n",
      "The number bikes at station (268, 'afternoon') is: 130\n",
      "The number bikes at station (268, 'night') is: 107\n"
     ]
    }
   ],
   "source": [
    "for i in B:\n",
    "    print(\"The number bikes at station\", i, \"is:\", math.ceil(B[i].X))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db71aabe",
   "metadata": {},
   "source": [
    "***\n",
    "The optimal number of bikes at the 5 busiest stations in each time period is\n",
    "\n",
    "| Time    |35 |192|76 |177|268|\n",
    "|:--------|---|---|---|---|---|\n",
    "|Morning  |230|78 |117|120|122|\n",
    "|Afternoon|237|136|110 |116  |130 |\n",
    "|Night    |198|187 |116 |105 |107 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "204339c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number bikes of to be repositioned  (35, 76, 'night') is: 30\n",
      "The number bikes of to be repositioned  (76, 177, 'night') is: 18\n",
      "The number bikes of to be repositioned  (177, 268, 'night') is: 29\n",
      "The number bikes of to be repositioned  (268, 192, 'night') is: 51\n"
     ]
    }
   ],
   "source": [
    "for i in X:\n",
    "    if (X[i].X != 0):\n",
    "        print(\"The number bikes of to be repositioned \", i, \"is:\", math.ceil(X[i].X))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4570bf51",
   "metadata": {},
   "source": [
    "#### Conlusion:\n",
    "As we can see from results, the minimum value of the objective function increases by 317% when adding an additional time consideration. Eventhough the access to bikes in near stations is the most important part of customer satisfaction, the high percentage increase in our optimal function suggest it wouldn’t be worth it to add a new time section. However, no conclusion can be made without the financial breakdown of costs and the potential change in the cashflow projections to determine the profitability of adding a new time section."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e9f53e8",
   "metadata": {},
   "source": [
    "# CONCLUSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a11276df",
   "metadata": {},
   "source": [
    "To summarize, this study aimed to provide an optimal logistic scheme for DIVVY’s transport services. This was achieved through an exploration of the data to determine the constraints and the selection of the decision variables explained above. After optimizing the relaxed version of the model, we found the optimal value for the number of bikes to be reposition from a given station. Furthermore, a sensitivity analysis was conducted to explore the changes in the number of transports when the constraint for the number of bikes was altered. Additional financial data is required to confirm the managerial recommendations, such as the cost of acquiring or manufacturing new bikes and the projected operational revenue, but according to our initial evaluation increasing the number of bikes available wouldn’t be practical for the company as there will be no change in the number of repositioning operations. Moreover, the huge increase in the value of objective function (317%) also doesn't justify the addition of a new time section.\\\n",
    "As next steps, we suggest increasing the computational resources to expand the study to all stations available, to create a general transport scheme. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
